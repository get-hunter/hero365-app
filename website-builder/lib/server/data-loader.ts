/**
 * Data Loader for Static Site Generation
 * 
 * Loads JSON artifacts generated by the backend StaticSiteBuilderService
 * for use in Next.js static generation.
 */

import { promises as fs } from 'fs';
import path from 'path';

export interface BusinessData {
  id: string;
  name: string;
  description?: string;
  phone_number?: string;
  business_email?: string;
  website?: string;
  logo_url?: string;
  address?: string;
  city?: string;
  state?: string;
  zip_code?: string;
  trades: string[];
  service_areas: string[];
  business_hours?: any;
  primary_trade?: string;
  seo_keywords: string[];
}

export interface ServiceCategory {
  id: string;
  name: string;
  description?: string;
  icon_name?: string;
  slug: string;
  services_count: number;
  is_featured: boolean;
  sort_order: number;
}

export interface PromoOffer {
  id: string;
  title: string;
  subtitle?: string;
  description?: string;
  offer_type: string;
  price_label?: string;
  badge_text?: string;
  cta_text: string;
  cta_link?: string;
  placement: string;
  priority: number;
  is_featured: boolean;
}

export interface Rating {
  platform: string;
  rating: number;
  review_count: number;
  display_name: string;
  logo_url?: string;
  profile_url?: string;
  is_featured: boolean;
}

export interface Award {
  id: string;
  name: string;
  issuing_organization?: string;
  description?: string;
  certificate_type?: string;
  logo_url?: string;
  certificate_url?: string;
  verification_url?: string;
  is_featured: boolean;
  is_current: boolean;
  trade_relevance: string[];
}

export interface Partnership {
  id: string;
  partner_name: string;
  partner_type: string;
  partnership_level?: string;
  description?: string;
  partnership_benefits: string[];
  logo_url: string;
  partner_url?: string;
  verification_url?: string;
  is_featured: boolean;
  trade_relevance: string[];
}

export interface Testimonial {
  id: string;
  quote: string;
  rating?: number;
  customer_name: string;
  customer_location?: string;
  service_performed?: string;
  service_date?: string;
  is_featured: boolean;
  is_verified: boolean;
}

export interface Location {
  id: string;
  name: string;
  address: string;
  city: string;
  state: string;
  zip_code?: string;
  latitude?: number;
  longitude?: number;
  service_radius_miles?: number;
  location_type: string;
  is_primary: boolean;
  services_offered: string[];
  trades_covered: string[];
  page_slug?: string;
}

export interface RouteManifest {
  routes: Array<{
    path: string;
    name: string;
    title: string;
  }>;
  generated_at: string;
  template_name: string;
  business_name: string;
}

/**
 * Load business data from JSON artifact
 */
export async function loadBusinessData(): Promise<BusinessData> {
  try {
    const dataPath = path.join(process.cwd(), 'lib', 'data', 'business.json');
    const fileContents = await fs.readFile(dataPath, 'utf8');
    return JSON.parse(fileContents);
  } catch (error) {
    console.error('Failed to load business data:', error);
    // Return fallback data for development
    return {
      id: 'dev-business',
      name: 'Professional Services',
      description: 'Quality services you can trust',
      trades: ['plumbing'],
      service_areas: ['Local Area'],
      seo_keywords: ['professional services']
    };
  }
}

/**
 * Load service categories from JSON artifact
 */
export async function loadServiceCategories(): Promise<ServiceCategory[]> {
  try {
    const dataPath = path.join(process.cwd(), 'lib', 'data', 'service-categories.json');
    const fileContents = await fs.readFile(dataPath, 'utf8');
    return JSON.parse(fileContents);
  } catch (error) {
    console.error('Failed to load service categories:', error);
    return [];
  }
}

/**
 * Load promotional offers from JSON artifact
 */
export async function loadPromos(): Promise<PromoOffer[]> {
  try {
    const dataPath = path.join(process.cwd(), 'lib', 'data', 'promos.json');
    const fileContents = await fs.readFile(dataPath, 'utf8');
    return JSON.parse(fileContents);
  } catch (error) {
    console.error('Failed to load promos:', error);
    return [];
  }
}

/**
 * Load ratings from JSON artifact
 */
export async function loadRatings(): Promise<Rating[]> {
  try {
    const dataPath = path.join(process.cwd(), 'lib', 'data', 'ratings.json');
    const fileContents = await fs.readFile(dataPath, 'utf8');
    return JSON.parse(fileContents);
  } catch (error) {
    console.error('Failed to load ratings:', error);
    return [];
  }
}

/**
 * Load awards from JSON artifact
 */
export async function loadAwards(): Promise<Award[]> {
  try {
    const dataPath = path.join(process.cwd(), 'lib', 'data', 'awards.json');
    const fileContents = await fs.readFile(dataPath, 'utf8');
    return JSON.parse(fileContents);
  } catch (error) {
    console.error('Failed to load awards:', error);
    return [];
  }
}

/**
 * Load partnerships from JSON artifact
 */
export async function loadPartnerships(): Promise<Partnership[]> {
  try {
    const dataPath = path.join(process.cwd(), 'lib', 'data', 'partnerships.json');
    const fileContents = await fs.readFile(dataPath, 'utf8');
    return JSON.parse(fileContents);
  } catch (error) {
    console.error('Failed to load partnerships:', error);
    return [];
  }
}

/**
 * Load testimonials from JSON artifact
 */
export async function loadTestimonials(): Promise<Testimonial[]> {
  try {
    const dataPath = path.join(process.cwd(), 'lib', 'data', 'testimonials.json');
    const fileContents = await fs.readFile(dataPath, 'utf8');
    return JSON.parse(fileContents);
  } catch (error) {
    console.error('Failed to load testimonials:', error);
    return [];
  }
}

/**
 * Load locations from JSON artifact
 */
export async function loadLocations(): Promise<Location[]> {
  try {
    const dataPath = path.join(process.cwd(), 'lib', 'data', 'locations.json');
    const fileContents = await fs.readFile(dataPath, 'utf8');
    return JSON.parse(fileContents);
  } catch (error) {
    console.error('Failed to load locations:', error);
    return [];
  }
}

/**
 * Load route manifest from JSON artifact
 */
export async function loadRouteManifest(): Promise<RouteManifest> {
  try {
    const dataPath = path.join(process.cwd(), 'lib', 'route-manifest.json');
    const fileContents = await fs.readFile(dataPath, 'utf8');
    return JSON.parse(fileContents);
  } catch (error) {
    console.error('Failed to load route manifest:', error);
    return {
      routes: [
        { path: '/', name: 'Home', title: 'Home' },
        { path: '/about', name: 'About', title: 'About' },
        { path: '/services', name: 'Services', title: 'Services' },
        { path: '/contact', name: 'Contact', title: 'Contact' }
      ],
      generated_at: new Date().toISOString(),
      template_name: 'professional',
      business_name: 'Professional Services'
    };
  }
}

/**
 * Load all template data
 */
export async function loadTemplateData() {
  const [
    business,
    serviceCategories,
    promos,
    ratings,
    awards,
    partnerships,
    testimonials,
    locations,
    routeManifest
  ] = await Promise.all([
    loadBusinessData(),
    loadServiceCategories(),
    loadPromos(),
    loadRatings(),
    loadAwards(),
    loadPartnerships(),
    loadTestimonials(),
    loadLocations(),
    loadRouteManifest()
  ]);

  return {
    business,
    serviceCategories,
    promos,
    ratings,
    awards,
    partnerships,
    testimonials,
    locations,
    routeManifest
  };
}
