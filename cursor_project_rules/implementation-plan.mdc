# Hero365 Hybrid Search Implementation Plan

## Overview
Implement hybrid search capabilities using pgvector extension in Supabase to provide AI agents with better context through semantic similarity and relationship verification.

## Phase 1: Vector Database Foundation

### Step 1.1: Enable pgvector Extension
- [ ] Create migration to enable pgvector extension in Supabase
- [ ] Test extension availability and vector operations
- [ ] Validate vector indexing capabilities

### Step 1.2: Create Entity Embeddings Table
- [ ] Design `entity_embeddings` table schema with:
  - `id` (UUID primary key)
  - `entity_type` (enum: contact, job, estimate, invoice, product, project)
  - `entity_id` (UUID reference to actual entity)
  - `business_id` (UUID for multi-tenancy)
  - `embedding` (vector(1536) for OpenAI embeddings)
  - `content_hash` (text for change detection)
  - `created_at`, `updated_at` timestamps
- [ ] Create indexes for performance optimization
- [ ] Create enum type for entity types

### Step 1.3: Relationship Verification Functions
- [ ] Create database functions to verify business relationships:
  - `verify_contact_relationships(contact_id, related_ids[])`
  - `verify_job_relationships(job_id, related_ids[])`
  - `verify_estimate_relationships(estimate_id, related_ids[])`
  - `verify_product_relationships(product_id, related_ids[])`
- [ ] Create unified relationship checker function
- [ ] Test relationship verification with sample data

## Phase 2: Embedding Management Infrastructure

### Step 2.1: External Embedding Service
- [ ] Create `EmbeddingService` interface in application/ports/
- [ ] Implement OpenAI embeddings adapter in infrastructure/external_services/
- [ ] Add embedding generation for text content
- [ ] Add batch embedding processing capabilities
- [ ] Configure embedding model settings (text-embedding-3-small)

### Step 2.2: Content Extraction Layer
- [ ] Create content extraction functions for each entity type:
  - Contact: name, email, phone, address, notes
  - Job: title, description, status, address
  - Estimate: title, description, items, total
  - Invoice: similar to estimate
  - Product: name, description, category, specifications
  - Project: name, description, scope
- [ ] Implement content change detection using hashing
- [ ] Create unified content extractor interface

### Step 2.3: Embedding Repository
- [ ] Create `HybridSearchRepository` interface in domain/repositories/
- [ ] Implement Supabase-based repository in infrastructure/database/repositories/
- [ ] Add methods for:
  - `store_embedding(entity_type, entity_id, content, business_id)`
  - `update_embedding(entity_type, entity_id, content)`
  - `search_similar(query_embedding, entity_types[], limit, threshold)`
  - `verify_relationships(entity_type, entity_id, related_results[])`
- [ ] Add error handling and logging

## Phase 3: Search Engine Core

### Step 3.1: Hybrid Search Use Case
- [ ] Create `HybridSearchUseCase` in application/use_cases/
- [ ] Implement search logic combining:
  - Text-based search (existing ilike queries)
  - Vector similarity search
  - Relationship verification
  - Business context filtering
- [ ] Add search result ranking and scoring
- [ ] Implement search result aggregation

### Step 3.2: Search API Layer
- [ ] Create search schemas in api/schemas/search_schemas.py
- [ ] Add search route in api/routes/search.py
- [ ] Implement search endpoints:
  - `POST /search/hybrid` - unified search across entities
  - `POST /search/similar/{entity_type}/{entity_id}` - find similar entities
  - `POST /search/related/{entity_type}/{entity_id}` - find related entities
- [ ] Add input validation and error handling

### Step 3.3: Search Integration Service
- [ ] Create `SearchIntegrationService` in application/services/
- [ ] Implement search context building for agents
- [ ] Add search result formatting for different contexts
- [ ] Create search history and analytics tracking

## Phase 4: Agent Integration

### Step 4.1: Enhanced Agent Tools
- [ ] Update `Hero365Tools` class to include hybrid search capabilities
- [ ] Add new tool methods:
  - `hybrid_search_entities(query, entity_types, limit)`
  - `find_similar_entities(entity_type, entity_id, limit)`
  - `verify_entity_relationships(entity_type, entity_id, related_ids)`
- [ ] Update existing tools to use hybrid search when appropriate
- [ ] Add context enrichment for search results

### Step 4.2: Agent Context Enhancement
- [ ] Update `ContextManager` to use hybrid search for context building
- [ ] Implement smart context loading based on conversation history
- [ ] Add proactive context suggestions for agents
- [ ] Create context relevance scoring

### Step 4.3: Specialized Agent Updates
- [ ] Update `ContactAgent` to use hybrid search for contact discovery
- [ ] Update `JobAgent` to find related jobs, estimates, and contacts
- [ ] Update `EstimateAgent` to find similar estimates and related entities
- [ ] Update `InvoiceAgent` to leverage payment history and related data
- [ ] Add cross-agent context sharing capabilities

## Phase 5: Background Processing

### Step 5.1: Embedding Sync System
- [ ] Create background task system for embedding generation
- [ ] Implement entity change detection triggers
- [ ] Add batch processing for existing entity embeddings
- [ ] Create embedding refresh scheduling
- [ ] Add error handling and retry mechanisms


### Step 5.2: Data Migration
- [ ] Create migration script for existing entities
- [ ] Implement progressive embedding generation
- [ ] Add data validation and integrity checks
- [ ] Create rollback procedures

## Phase 6: Testing and Optimization

### Step 6.1: Unit Testing
- [ ] Create tests for embedding service
- [ ] Test hybrid search repository
- [ ] Test search use cases
- [ ] Test agent tool integration
- [ ] Add performance benchmarks

### Step 6.2: Integration Testing
- [ ] Test end-to-end search workflows
- [ ] Test agent interactions with search
- [ ] Test multi-entity search scenarios
- [ ] Test relationship verification accuracy
- [ ] Test search performance under load

### Step 6.3: Performance Optimization
- [ ] Optimize vector search queries
- [ ] Implement search result caching
- [ ] Add index optimization
- [ ] Implement query optimization
- [ ] Add connection pooling for search operations

## Phase 7: Documentation and Deployment

### Step 7.1: API Documentation
- [ ] Generate OpenAPI documentation for search endpoints
- [ ] Create mobile app integration guide
- [ ] Document search query patterns
- [ ] Add search best practices guide

### Step 7.2: Deployment Preparation
- [ ] Update environment configurations
- [ ] Add production migration scripts
- [ ] Create deployment checklist
- [ ] Add monitoring setup

### Step 7.3: Feature Rollout
- [ ] Implement feature flags for gradual rollout
- [ ] Create A/B testing framework
- [ ] Add performance monitoring
- [ ] Plan user training materials

## Success Metrics

### Technical Metrics
- [ ] Search response time < 200ms for 95% of queries
- [ ] Vector similarity accuracy > 85%
- [ ] Relationship verification accuracy > 95%
- [ ] Search result relevance score > 0.8

### Business Metrics
- [ ] Agent response accuracy improvement > 30%
- [ ] User task completion time reduction > 25%
- [ ] Cross-entity discovery rate > 40%
- [ ] Search-driven action success rate > 80%

## Risk Mitigation

### Technical Risks
- [ ] Vector index performance degradation - mitigation: implement index optimization
- [ ] Embedding cost escalation - mitigation: implement caching and batch processing
- [ ] Search latency issues - mitigation: implement query optimization and caching
- [ ] Data consistency issues - mitigation: implement robust sync mechanisms

### Business Risks
- [ ] Agent context confusion - mitigation: implement strict relationship verification
- [ ] Search result irrelevance - mitigation: implement relevance scoring and feedback
- [ ] System complexity increase - mitigation: maintain clean architecture boundaries
- [ ] Migration complexity - mitigation: implement progressive rollout strategy

## Next Steps
1. Start with Phase 1.1 - Enable pgvector extension
2. Progress through phases sequentially
3. Test thoroughly at each phase
4. Maintain existing functionality during implementation
5. Document all changes and decisions

---

## Implementation Log
*Track completion of each step with "Done" status and brief summary*

### Phase 1: Vector Database Foundation
- Step 1.1: Enable pgvector Extension - **Done**
- Step 1.2: Create Entity Embeddings Table - **Done**
- Step 1.3: Relationship Verification Functions - **Done**

### Phase 2: Embedding Management Infrastructure
- Step 2.1: External Embedding Service - **Done**
- Step 2.2: Content Extraction Layer - **Done**
- Step 2.3: Embedding Repository - **Done**

### Phase 3: Search Engine Core
- Step 3.1: Hybrid Search Use Case - **Pending**
- Step 3.2: Search API Layer - **Pending**
- Step 3.3: Search Integration Service - **Pending**

### Phase 4: Agent Integration
- Step 4.1: Enhanced Agent Tools - **Pending**
- Step 4.2: Agent Context Enhancement - **Pending**
- Step 4.3: Specialized Agent Updates - **Pending**

### Phase 5: Background Processing
- Step 5.1: Embedding Sync System - **Pending**
- Step 5.2: Data Migration - **Pending**

### Phase 6: Testing and Optimization
- Step 6.1: Unit Testing - **Pending**
- Step 6.2: Integration Testing - **Pending**
- Step 6.3: Performance Optimization - **Pending**

### Phase 7: Documentation and Deployment
- Step 7.1: API Documentation - **Pending**
- Step 7.2: Deployment Preparation - **Pending**
- Step 7.3: Feature Rollout - **Pending**