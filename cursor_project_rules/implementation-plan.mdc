
---

### 1) Service Assignment & SEO Seeds Improvements (Trackable)
- Task: Data model alignment (service keys vs trade enums)
  - Status: Done
  - Acceptance: Business has `selected_residential_service_keys`/`selected_commercial_service_keys` JSONB persisted; trade enums remain intact
  - Notes: Added new JSONB fields to Business entity and updated auto_assign_default_services to populate both trade enums and service keys.
    Migration 20250201020004_add_service_key_fields.sql adds the new columns with proper indexes.

- Task: Repository support for service key JSONB
  - Status: Done
  - Acceptance: Read/write round-trip for service key arrays; mapping helpers in place
  - Notes: Updated SupabaseBusinessRepository to persist and read selected_*_service_keys arrays.
    Repository now handles both legacy trade enums and new service key arrays for backward compatibility.

- Task: Materialization service + endpoint
  - Status: Done
  - Steps:
    - App service computes defaults from trade(s)+market_focus and upserts `business_services`
    - POST `/services/business/{business_id}/materialize-defaults` triggers service
  - Acceptance: Idempotent creation of `business_services` matching mapping; business JSONB keys synced
  - Notes: Created ServiceMaterializationService with intelligent pricing logic and proper market flag setting.
    Added POST endpoint that creates business_services entries and updates business JSONB keys atomically.

- Task: Slug normalization (kebab-case)
  - Status: Done
  - Steps:
    - Backend slug utility; migration to normalize existing underscore slugs
  - Acceptance: Single canonical slug format across `business_services`, SEO tables, builder
  - Notes: Created SlugUtils class for consistent kebab-case slug generation across the platform.
    Migration 20250201020005_normalize_service_slugs.sql converts existing snake_case slugs to kebab-case.

- Task: Seed expansion and correctness
  - Status: Done
  - Steps:
    - Set `is_residential`/`is_commercial` flags consistently per service
    - Add coverage for all listed trades (commercial + residential)
  - Acceptance: Demo data covers all trades; flags correct; idempotent seeds
  - Notes: Updated seed migration 20250201020003_default_services_seed.sql with kebab-case slugs and proper market flags.
    Consolidated all improvements into existing core migrations (20250201000002_core_business_tables.sql and 20250201020000_core_seed_data.sql) to avoid redundant files.

- Task: SEO scaffolding precompute
  - Status: Done
  - Steps:
    - Generate `service_location_pages` for service x location
    - Seed `service_seo_config` for top-priority services
  - Acceptance: Pages matrix ready for builder; priority captured
  - Notes: Enhanced WebsiteConfigurationService to automatically generate service_location_pages matrix and service_seo_config entries during website creation. Integrated with existing workflow instead of creating separate service.

- Task: Website builder integration preference
  - Status: Done
  - Acceptance: Builder prefers `business_services` for grids/pages; falls back to selected service keys when empty
  - Notes: Implemented 3-tier fallback in ContractorService: 1) business_services table, 2) selected service keys, 3) default mapping

- Task: API preview & management
  - Status: Pending
  - Steps:
    - GET `/services/business/{business_id}/defaults/preview` returns keys + display names + would-create set
    - PUT `/services/business/{business_id}` accepts keys; validates; syncs JSONB and (optionally) prunes catalog (flagged)
  - Acceptance: Clear preview/update flow; OpenAPI reflects endpoints
  - Notes:

- Task: Tests (unit + integration)
  - Status: Pending
  - Steps:
    - Unit: mapping per trade+market_focus
    - Integration: materialize → assert `business_services`, SEO rows, JSONB keys
  - Acceptance: CI green; coverage for mapping and materialization path
  - Notes:

- Task: Migrations & backfill
  - Status: Pending
  - Steps:
    - Add new JSONB fields (if needed); run slug normalization; backfill flags
    - Re-run seeds; ensure idempotency
  - Acceptance: `npx supabase db push` clean; no duplicates; consistent slugs/flags
  - Notes:

- Task: Docs & client regeneration
  - Status: Pending
  - Steps:
    - Document endpoints and contracts in `docs/api/`
    - Run `scripts/generate-openapi.sh`; update mobile client
  - Acceptance: Docs published; client compiles without type issues
  - Notes:

---

### 2) SEO Build Pipeline & LLM Content (Implementable Steps)

- Task: Backend build entrypoint (Celery task)
  - Status: Done
  - Steps:
    - Create `generate_website_with_seo_task` that:
      - Loads business, `service_location_pages`, `service_seo_config`
      - Selects top N by `priority_score` for LLM content
      - Upserts pages into `generated_seo_pages` (idempotent)
      - Emits a single JSON map (url → content) for builder
  - Acceptance: One task produces the pages map reproducibly; retries safe
  - Notes: Implemented `generate_llm_content_task` with comprehensive orchestration via LLMContentOrchestrator. Task handles business data fetch, SEO scaffolding, content generation, and structured JSON output for builder consumption.

- Task: LLM adapters orchestration
  - Status: Done
  - Steps:
    - Reuse existing OpenAI/Gemini adapters
    - Add orchestrator that batches prompts, enforces token/budget caps, and caches by (business_id, service_slug, location_slug, hash(inputs))
  - Acceptance: Top pages filled with LLM content; budget respected; deterministic cache keys
  - Notes: Implemented comprehensive LLMContentOrchestrator with primary/fallback adapter pattern. Integrated existing ContentGenerationFactory with OpenAI/Gemini/Claude adapters. Added quality validation, content enhancement, and graceful fallbacks. Supports multiple providers with automatic failover.

- Task: Builder data ingestion
  - Status: Done
  - Steps:
    - Update `website-builder/scripts/deploy-with-business.js` to fetch pages map (or read from a generated JSON artifact)
    - Generate static `seoPages` data module; pre-render all routes
    - Emit sitemap.xml and robots.txt from the same route matrix
  - Acceptance: Full SSG, no runtime fetch; sitemap/robots included
  - Notes: Implemented comprehensive data ingestion pipeline. Created SEO generator that transforms LLM content into static modules. Updated deployment script to fetch LLM content, generate SEO pages, and create sitemap/robots.txt. Enhanced seo-data.ts to use generated content with fallbacks. Full SSG achieved with no runtime API dependencies.

- Task: Performance hardening
  - Status: Done
  - Steps:
    - Enforce zero-hydration content pages; minimal JS
    - Critical CSS inlined; fonts preloaded; images optimized/static
    - Long‑TTL immutable assets; Cloudflare cache rules
  - Acceptance: Lighthouse ≥ 90 Perf, ≥ 95 A11y, ≥ 95 SEO on generated site
  - Notes: Implemented comprehensive performance optimizations: custom image loader with WebP/AVIF support, critical CSS inlining via PerformanceOptimizer component, resource preloading, service worker with cache-first/network-first strategies, PWA manifest, Web Vitals monitoring, Next.js static export with bundle splitting, and production-ready Cloudflare deployment configuration.

- Task: Structured data & internal linking
  - Status: Done
  - Steps:
    - Add LocalBusiness, Service, BreadcrumbList to pages
    - Related services and service↔location cross-links in templates
  - Acceptance: Rich results test passes; crawl depth improved via links
  - Notes: Implemented comprehensive SEO components: StructuredData component with LocalBusiness, Service, Organization, WebPage, WebSite, and BreadcrumbList schemas. InternalLinking component with related services, service↔location cross-links, breadcrumbs, and contextual navigation. SEOEnhancer component combining both with useSEOMetadata hook for complete SEO optimization.

- Task: Controls & re-generation
  - Status: Pending
  - Steps:
    - Add `regenerate_llm` flag per page; `last_generated_at`, `content_hash`
    - CLI/API to re-generate top K pages or specific routes
  - Acceptance: Targeted re-gen works; unchanged pages are cached
  - Notes:

