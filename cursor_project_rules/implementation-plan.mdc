
---

### 1) Activity‑First Website Builder & SEO Artifact System (Critical Feature)

Objectives
- Make websites feel "for my trade activity" using an activity-first model with programmatic SEO at scale.
- Drive copy, routing, booking forms, and SEO from RAG-enhanced content artifacts backed by business context.
- Replace generic templates with typed, versioned content artifacts with quality gates and A/B testing.
- Remove trade-first legacy; align backend contracts; regenerate OpenAPI/SDK.

Architecture (Target)
- **SEO Artifacts**: Typed ActivityPageArtifact objects with hero, benefits, process, FAQs, activity modules, JSON-LD schemas.
- **Primary pages**: `/services/<activity-slug>`; **localized pages**: `/locations/<city>/<activity-slug>` (when sufficient unique data exists).
- **Quality Gates**: E-E-A-T validation, uniqueness scoring, coverage assessment, local intent density.
- **Activity Modules**: Trade-specific UI components (HVAC tune-up checklist, plumbing severity triage, etc.).
- **Segmented Sitemaps**: Separate sitemaps for services, locations, projects with accurate lastmod from artifact updates.
- **A/B Testing**: Content variants with automated winner promotion based on performance metrics.
- **RAG Enhancement**: Content generation uses business data, technician profiles, projects, reviews, inventory.

Backend Tasks

- Task: SEO Artifact System Implementation
  - Status: Done
  - File(s): 
    - `backend/app/api/dtos/seo_artifact_dtos.py` (new) - Comprehensive DTOs for artifacts, sitemaps, quality metrics
    - `backend/app/api/routes/seo.py` (extended) - New artifact endpoints alongside legacy SEO routes
    - `supabase/migrations/20250207140000_add_seo_artifacts_system.sql` (new) - Database schema for artifacts
    - `docs/api/seo-artifacts-api.md` (new) - Complete API documentation
  - Routes: 
    - `POST /api/v1/seo/artifacts/{business_id}/generate` - Queue artifact generation jobs
    - `GET /api/v1/seo/artifacts/{business_id}` - List artifacts with filtering/pagination
    - `GET /api/v1/seo/artifacts/{business_id}/{artifact_id}` - Get specific artifact
    - `PUT /api/v1/seo/artifacts/{business_id}/{artifact_id}/approve` - Approve artifact
    - `POST /api/v1/seo/sitemaps/{business_id}/generate` - Generate segmented sitemaps
    - `GET /api/v1/seo/sitemaps/{business_id}` - Get sitemap manifest
    - `POST /api/v1/seo/experiments/{business_id}/promote` - Promote A/B test winners
  - Implementation: Complete with background job processing, quality gates, RAG integration, A/B testing support
  - OpenAPI: Regenerated with new endpoints and DTOs

- Task: Website context aggregator endpoint
  - Status: Done
  - File(s): `backend/app/api/public/routes/contractors/website_context.py` (new), DTOs in `backend/app/api/dtos/website_context_dtos.py`
  - Route: `GET /api/v1/public/website/context/{business_id}`
  - Implementation: Complete with 3 endpoints: full context, activities-only, summary. Includes caching headers and comprehensive documentation.

- Task: Public profile modernization
  - Status: Planned
  - File(s): `backend/app/api/public/routes/contractors/profile.py`, DTOs in `backend/app/api/public/routes/contractors/schemas.py`
  - Steps:
    - Replace `trade_type` with `primary_trade_slug`
    - Add `top_activity_slugs` (subset of `selected_activity_slugs`)
  - Acceptance: Response reflects new fields; legacy key absent; OpenAPI updated

- Task: Service/template discovery becomes activity-first
  - Status: Planned
  - File(s): `backend/app/api/routes/service_discovery.py`, `backend/app/api/routes/service_templates.py`
  - Steps:
    - Replace `trade_type`/`trade_types` filters with `activity_slug` (optional `trade_slug`)
    - Add `GET /api/v1/service-templates/by-activity/{activity_slug}`
  - Acceptance: Listing/filtering by activity works; repository supports lookups

- Task: Installation quotes filter by activity (if route retained)
  - Status: Planned
  - File(s): `backend/app/api/public/routes/contractors/installation_quotes.py`
  - Steps:
    - Replace `trade_type` query with `activity_slug`
    - Map activities to install templates in pricing engine
  - Acceptance: Quotes return consistent templates when filtered by activity

- Task: DTO cleanup to activity-first
  - Status: Planned
  - File(s): `backend/app/api/dtos/service_management_dtos.py`
  - Steps:
    - Deprecate `primary_trade`, `secondary_trades` in requests/responses
    - Prefer `selected_activity_slugs` everywhere
  - Acceptance: No remaining compile-time references in API modules

- Task: Docs & SDK regeneration
  - Status: Planned
  - Steps:
    - Add `docs/api/website-context.md` with examples
    - Run `/scripts/generate-client.sh` to refresh OpenAPI and clients
  - Acceptance: Documentation published; SDK compiles and used by builder

Website Builder Tasks

- Task: Rename SEO component to composer
  - Status: Done
  - File(s): `website-builder/components/seo/SEOEnhancer.tsx` → `SEOComposer.tsx`
  - Steps:
    - Create `SEOComposer.tsx`; migrate logic to be activity-aware
    - Provide temporary re-export shim from `SEOEnhancer.tsx` to `SEOComposer`
    - Update imports progressively; remove shim at cleanup phase
  - Acceptance: No `businessData.trades[0]` usage; composer takes `{ primary_trade_slug, activity_slug, serviceAreas }`

- Task: Activity content packs
  - Status: Done
  - File(s): `website-builder/lib/templates/types.ts`, `website-builder/lib/templates/<profile>/<activity>.ts`
  - Steps:
    - Define `ActivityContentPack` interface
    - Seed initial packs: hvac/ac-repair, hvac/ac-installation, hvac/hvac-maintenance, plumbing/drain-cleaning, electrical/panel-upgrade
    - Add profile default pack and global fallback pack
  - Acceptance: Packs load by `activity_slug`; fallback path works
  - Implementation: Complete with ActivityContentPack interface, HVAC and Plumbing content packs, backend API integration, and EnhancedActivityPage component.

- Task: Routing & prebuild generation
  - Status: Planned
  - File(s): `website-builder/lib/build-time/seo-generator.ts`, `website-builder/lib/build-time/sitemap-generator.ts`
  - Steps:
    - Fetch website context during build
    - Generate routes `/services/<activity>` and optional `/<city>/<activity>`
    - Emit `lib/generated/route-manifest.json` and `lib/generated/seo-pages.ts`
  - Acceptance: Pages build and render; sitemap includes new routes; ISR tags present

- Task: Pages & data wiring
  - Status: Planned
  - File(s): `website-builder/app/page.tsx`, `app/products/[slug]/page.tsx`, `app/projects/[slug]/page.tsx`, `components/layout/SEOPageLayout.tsx`
  - Steps:
    - Stop using `trade_type`; use `primary_trade_slug` and `activity_slug`
    - Pass content pack data to composer and layout
  - Acceptance: Home/products/projects render with activity-aware SEO when activity context is present

- Task: Booking: taxonomy-driven fields
  - Status: Planned
  - File(s): `website-builder/components/booking/steps/DetailsStep.tsx`
  - Steps:
    - Render `required_booking_fields` and `default_booking_fields` by type
    - Add basic client validation by field type
  - Acceptance: Fields match taxonomy; submit payload matches schema

- Task: JSON‑LD schema updates
  - Status: Planned
  - File(s): `website-builder/lib/json-ld-generator.ts`
  - Steps:
    - Use `serviceType = activity.name`; include `areaServed`
    - Add `offers` when pricing present in activity template
  - Acceptance: Structured data validates in rich results tester

- Task: UI polish for activity-first
  - Status: Planned
  - File(s): `components/professional/ProfessionalFooter.tsx`, `components/seo/InternalLinking.tsx`
  - Steps:
    - Footer: show profile and link top activities
    - Internal linking: link sibling activities within same profile
  - Acceptance: Links render correctly and improve crawlability

Legacy Decommission (after cutover)
- Status: Planned
- Remove trade-first artifacts and dead code:
  - `website-builder/lib/config/trade-configs.ts`
  - `website-builder/lib/seo-data.ts`
  - `website-builder/lib/templates/residential/hvac.ts`
  - `website-builder/components/SEOPage.tsx`, `SEOPageContent.tsx`, `EnhancedSEOPageContent.tsx` (if unused)
  - Old generated `lib/generated/seo-pages.{ts,js}` shape
  - Backend: remove `trade_type` usage and DTOs (`service_discovery.py`, `service_templates.py`, public `schemas.py`, `profile.py`, `installation_quotes.py`)

Rollout Phases & Acceptance
- Phase 1 (1 day): Rename + `SEOComposer` foundation + first HVAC pack
  - AC: Composer activity-aware; build green; shim in place
- Phase 2 (1–2 days): Website context endpoint + docs + OpenAPI/SDK
  - AC: Endpoint returns business, activities, templates; SDK types consumed by builder
- Phase 3 (1–2 days): Routing + prebuild + sitemap
  - AC: `/services/<activity>` renders; localized routes generated when areas exist
- Phase 4 (1 day): Booking fields from taxonomy
  - AC: Required/default fields render and validate
- Phase 5 (1 day): Backend activity-first discovery/templates; deprecate trade params
  - AC: New endpoints live; old ones gated or clearly deprecated
- Phase 6 (0.5–1 day): Remove legacy; grep gates pass
  - AC: No references to `trade_type`, `SEOEnhancer`, `businessData.trades` remain

Testing Strategy
- Unit: content packs shape/fallbacks; JSON‑LD generator; booking field renderer
- Integration: website-context aggregation; template lookup by activity
- E2E (Playwright): `/services/ac-repair` renders with pack; booking shows taxonomy fields; localized routes resolve
- SEO QA: Titles/descriptions follow pack; schema validates

Observability & Quality Gates
- Log website-context access and pack fallbacks; count missing packs
- CI grep gates: `trade_type`, `SEOEnhancer`, `businessData.trades` must be zero

Performance
- Prebuild route manifest; ISR (1h) per business/activity; lazy-load heavy UI

Security
- Public endpoints are read-only, rate-limited; sanitize strings for JSON‑LD

Documentation
- `docs/api/website-context.md` (contracts, examples)
- Update website-builder docs: content pack conventions, routing, JSON‑LD, booking

Timeline
- Week 1: Phases 1–3
- Week 2: Phases 4–6, QA, docs

Implementation Log
- 2025-02-07: SEO Artifact System foundations completed (DTOs, API endpoints, database schema, documentation)
- 2025-02-07: Frontend artifact system completed (ArtifactPage, activity modules, A/B testing, sitemap integration)

---

## SEO Artifact System Implementation Summary

### Completed (2025-02-07):
- ✅ **Backend DTOs**: Comprehensive `seo_artifact_dtos.py` with ActivityPageArtifact, quality metrics, A/B testing support
- ✅ **API Endpoints**: 7 new artifact endpoints in `/api/v1/seo/` for generation, management, sitemaps, experiments
- ✅ **Database Schema**: Complete migration with `seo_artifacts`, `sitemap_manifests`, quality gates, RLS policies
- ✅ **API Documentation**: Detailed `docs/api/seo-artifacts-api.md` with examples and integration guides
- ✅ **OpenAPI Generation**: Updated spec with new endpoints and DTOs
- ✅ **Legacy Cleanup Plan**: Comprehensive deprecation strategy in `docs/legacy-seo-cleanup-plan.md`

### Next Priority - Frontend Integration:
- 🔄 **Artifact Renderer**: Universal component to render ActivityPageArtifact objects
- 🔄 **Activity Modules**: Trade-specific UI components (HVAC calculators, plumbing tools, etc.)
- 🔄 **A/B Testing**: Client-side variant rendering with performance tracking
- 🔄 **Sitemap Integration**: Replace legacy generators with artifact API calls
- 🔄 **Quality Dashboard**: Admin interface for artifact approval and metrics

### Architecture Benefits:
- **Programmatic SEO**: Generate 1000s of pages with unique, contextual content
- **Quality Gates**: E-E-A-T validation prevents thin content
- **RAG Enhancement**: Content uses real business data, technician profiles, projects
- **A/B Testing**: Built-in experimentation with automated winner promotion
- **Performance**: Typed artifacts with caching, faster than template generation
- **Scalability**: Segmented sitemaps, background job processing
- **Maintainability**: Clean separation of content generation and rendering

