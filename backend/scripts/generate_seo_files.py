#!/usr/bin/env python3
"""
Generate SEO files (sitemap.xml, robots.txt) for professional websites.
"""

from pathlib import Path
from datetime import datetime
import xml.etree.ElementTree as ET
from xml.dom import minidom


def generate_sitemap(domain: str, pages: list, output_dir: Path):
    """Generate XML sitemap for the website."""
    
    # Create sitemap root
    urlset = ET.Element("urlset")
    urlset.set("xmlns", "http://www.sitemaps.org/schemas/sitemap/0.9")
    urlset.set("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
    urlset.set("xsi:schemaLocation", "http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd")
    
    # Default pages
    default_pages = [
        {"url": "/", "priority": "1.0", "changefreq": "weekly"},
        {"url": "/services", "priority": "0.9", "changefreq": "monthly"},
        {"url": "/about", "priority": "0.8", "changefreq": "monthly"},
        {"url": "/contact", "priority": "0.9", "changefreq": "monthly"},
        {"url": "/emergency", "priority": "0.9", "changefreq": "monthly"},
        {"url": "/service-areas", "priority": "0.8", "changefreq": "monthly"},
        {"url": "/reviews", "priority": "0.7", "changefreq": "weekly"},
    ]
    
    # Service-specific pages
    service_pages = [
        {"url": "/services/ac-repair", "priority": "0.9", "changefreq": "monthly"},
        {"url": "/services/heating-repair", "priority": "0.9", "changefreq": "monthly"},
        {"url": "/services/hvac-installation", "priority": "0.8", "changefreq": "monthly"},
        {"url": "/services/maintenance", "priority": "0.8", "changefreq": "monthly"},
        {"url": "/services/emergency", "priority": "0.9", "changefreq": "monthly"},
    ]
    
    # Location-specific pages
    location_pages = [
        {"url": "/austin-hvac", "priority": "0.9", "changefreq": "monthly"},
        {"url": "/round-rock-hvac", "priority": "0.8", "changefreq": "monthly"},
        {"url": "/cedar-park-hvac", "priority": "0.8", "changefreq": "monthly"},
        {"url": "/pflugerville-hvac", "priority": "0.8", "changefreq": "monthly"},
        {"url": "/georgetown-hvac", "priority": "0.7", "changefreq": "monthly"},
    ]
    
    all_pages = pages if pages else (default_pages + service_pages + location_pages)
    
    # Add URLs to sitemap
    for page in all_pages:
        url_elem = ET.SubElement(urlset, "url")
        
        loc = ET.SubElement(url_elem, "loc")
        loc.text = f"https://{domain}{page['url']}"
        
        lastmod = ET.SubElement(url_elem, "lastmod")
        lastmod.text = datetime.now().strftime("%Y-%m-%d")
        
        changefreq = ET.SubElement(url_elem, "changefreq")
        changefreq.text = page.get("changefreq", "monthly")
        
        priority = ET.SubElement(url_elem, "priority")
        priority.text = page.get("priority", "0.5")
    
    # Pretty print XML
    rough_string = ET.tostring(urlset, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    pretty_xml = reparsed.toprettyxml(indent="  ", encoding="utf-8")
    
    # Remove empty lines and fix encoding
    lines = [line for line in pretty_xml.decode('utf-8').split('\n') if line.strip()]
    final_xml = '\n'.join(lines)
    
    # Write sitemap
    sitemap_path = output_dir / "sitemap.xml"
    with open(sitemap_path, 'w', encoding='utf-8') as f:
        f.write(final_xml)
    
    print(f"✅ Generated sitemap.xml with {len(all_pages)} pages")
    return sitemap_path


def generate_robots_txt(domain: str, output_dir: Path):
    """Generate robots.txt file."""
    
    robots_content = f"""# Robots.txt for {domain}
# Generated by Hero365 Website Builder

User-agent: *
Allow: /

# Sitemaps
Sitemap: https://{domain}/sitemap.xml

# Disallow admin and private areas
Disallow: /admin/
Disallow: /private/
Disallow: /_next/
Disallow: /api/

# Allow important pages
Allow: /services/
Allow: /about/
Allow: /contact/
Allow: /reviews/
Allow: /service-areas/

# Crawl delay for respectful crawling
Crawl-delay: 1

# Block specific bots if needed
# User-agent: BadBot
# Disallow: /
"""
    
    robots_path = output_dir / "robots.txt"
    with open(robots_path, 'w') as f:
        f.write(robots_content.strip())
    
    print(f"✅ Generated robots.txt")
    return robots_path


def generate_schema_markup(business_info: dict, services: list):
    """Generate comprehensive JSON-LD schema markup."""
    
    schema = {
        "@context": "https://schema.org",
        "@graph": [
            {
                "@type": "LocalBusiness",
                "@id": f"https://{business_info['domain']}/#business",
                "name": business_info["name"],
                "description": business_info["description"],
                "url": f"https://{business_info['domain']}",
                "telephone": business_info["phone"],
                "email": business_info["email"],
                "address": {
                    "@type": "PostalAddress",
                    "streetAddress": business_info["address"],
                    "addressLocality": "Austin",
                    "addressRegion": "TX",
                    "addressCountry": "US"
                },
                "geo": {
                    "@type": "GeoCoordinates",
                    "latitude": "30.2672",
                    "longitude": "-97.7431"
                },
                "areaServed": [
                    {"@type": "City", "name": "Austin, TX"},
                    {"@type": "City", "name": "Round Rock, TX"},
                    {"@type": "City", "name": "Cedar Park, TX"},
                    {"@type": "City", "name": "Pflugerville, TX"}
                ],
                "openingHours": [
                    "Mo-Fr 07:00-20:00",
                    "Sa-Su 08:00-18:00"
                ],
                "priceRange": "$$",
                "hasOfferCatalog": {
                    "@type": "OfferCatalog",
                    "name": "HVAC Services",
                    "itemListElement": [
                        {
                            "@type": "Offer",
                            "itemOffered": {
                                "@type": "Service",
                                "name": service["title"],
                                "description": service["description"]
                            }
                        } for service in services
                    ]
                },
                "aggregateRating": {
                    "@type": "AggregateRating",
                    "ratingValue": "4.9",
                    "reviewCount": "247",
                    "bestRating": "5",
                    "worstRating": "1"
                }
            },
            {
                "@type": "WebSite",
                "@id": f"https://{business_info['domain']}/#website",
                "url": f"https://{business_info['domain']}",
                "name": f"{business_info['name']} - Professional HVAC Services",
                "description": business_info["description"],
                "publisher": {
                    "@id": f"https://{business_info['domain']}/#business"
                },
                "potentialAction": {
                    "@type": "SearchAction",
                    "target": f"https://{business_info['domain']}/search?q={{search_term_string}}",
                    "query-input": "required name=search_term_string"
                }
            }
        ]
    }
    
    return schema


def generate_meta_tags(business_info: dict, page_info: dict):
    """Generate comprehensive meta tags for SEO."""
    
    meta_tags = f"""
<!-- Primary Meta Tags -->
<title>{page_info['title']}</title>
<meta name="title" content="{page_info['title']}">
<meta name="description" content="{page_info['description']}">
<meta name="keywords" content="{', '.join(page_info['keywords'])}">

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website">
<meta property="og:url" content="https://{business_info['domain']}/">
<meta property="og:title" content="{page_info['title']}">
<meta property="og:description" content="{page_info['description']}">
<meta property="og:image" content="https://{business_info['domain']}/og-image.jpg">

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image">
<meta property="twitter:url" content="https://{business_info['domain']}/">
<meta property="twitter:title" content="{page_info['title']}">
<meta property="twitter:description" content="{page_info['description']}">
<meta property="twitter:image" content="https://{business_info['domain']}/og-image.jpg">

<!-- Local Business -->
<meta name="geo.region" content="US-TX">
<meta name="geo.placename" content="Austin">
<meta name="geo.position" content="30.2672;-97.7431">
<meta name="ICBM" content="30.2672, -97.7431">

<!-- Mobile -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="format-detection" content="telephone=yes">

<!-- Verification -->
<meta name="google-site-verification" content="your-google-verification-code">
<meta name="msvalidate.01" content="your-bing-verification-code">
"""
    
    return meta_tags.strip()


def main():
    """Generate SEO files for testing."""
    
    output_dir = Path("seo_output")
    output_dir.mkdir(exist_ok=True)
    
    # Test data
    business_info = {
        "domain": "austinelitehvac.com",
        "name": "Austin Elite HVAC",
        "description": "Professional HVAC services in Austin, TX",
        "phone": "(512) 555-COOL",
        "email": "service@austinelitehvac.com",
        "address": "456 Tech Ridge Blvd, Austin, TX 78753"
    }
    
    services = [
        {"title": "AC Repair", "description": "Emergency AC repair services"},
        {"title": "Heating Repair", "description": "Furnace and heating system repair"},
        {"title": "HVAC Installation", "description": "New HVAC system installation"},
        {"title": "Maintenance", "description": "Preventive maintenance plans"}
    ]
    
    # Generate files
    generate_sitemap(business_info["domain"], [], output_dir)
    generate_robots_txt(business_info["domain"], output_dir)
    
    # Generate schema
    schema = generate_schema_markup(business_info, services)
    with open(output_dir / "schema.json", 'w') as f:
        import json
        json.dump(schema, f, indent=2)
    
    print("✅ All SEO files generated successfully!")


if __name__ == "__main__":
    main()
