#!/usr/bin/env python3
"""
Direct Subdomain Deployment Test

Test the Hero365 subdomain deployment infrastructure directly
with mock HTML files to verify it works end-to-end.
"""

import asyncio
import tempfile
import os
import uuid
from pathlib import Path

from app.infrastructure.adapters.hero365_subdomain_adapter import Hero365SubdomainAdapter
from app.domain.entities.website import BusinessWebsite


async def test_direct_deployment():
    """Test direct deployment to hero365.ai subdomain."""
    
    print("🚀 Testing Direct Subdomain Deployment")
    print("=" * 50)
    
    try:
        # Create a mock website
        website = BusinessWebsite(
            id=uuid.uuid4(),
            business_id=uuid.uuid4(),
            subdomain='test-plumbing-direct',
            primary_trade='plumbing',
            seo_keywords=['plumbing', 'test']
        )
        
        print(f"📋 Created mock website: {website.subdomain}")
        
        # Create a temporary directory with mock website files
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)
            
            # Create mock HTML file
            html_content = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QuickFix Plumbing - Professional Plumbing Services</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 8px; }
        h1 { color: #2563eb; margin-bottom: 20px; }
        .contact { background: #eff6ff; padding: 20px; border-radius: 8px; margin: 20px 0; }
        .footer { text-align: center; margin-top: 40px; color: #666; font-size: 14px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>🔧 QuickFix Plumbing</h1>
        <p><strong>Professional plumbing services in New York</strong></p>
        
        <h2>Our Services</h2>
        <ul>
            <li>Emergency plumbing repairs</li>
            <li>Drain cleaning and unclogging</li>
            <li>Water heater installation & repair</li>
            <li>Pipe replacement and repiping</li>
            <li>Fixture installation</li>
        </ul>
        
        <div class="contact">
            <h3>📞 Contact Us</h3>
            <p><strong>Phone:</strong> +1-555-TEST-123</p>
            <p><strong>Email:</strong> test@quickfixplumbing.com</p>
            <p><strong>Service Areas:</strong> New York, New York Metro, Nearby Areas</p>
            <p><strong>Available:</strong> 24/7 Emergency Service</p>
        </div>
        
        <div class="footer">
            <p>🤖 Generated by Hero365 AI Website Builder</p>
            <p>Deployed to: <strong>https://test-plumbing-direct.hero365.ai</strong></p>
        </div>
    </div>
</body>
</html>"""
            
            # Write HTML file
            html_file = temp_path / 'index.html'
            html_file.write_text(html_content)
            
            # Create a simple CSS file
            css_content = """/* Hero365 Generated Styles */
body { 
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
}
.hero { 
    background: linear-gradient(135deg, #2563eb, #1d4ed8);
    color: white;
    padding: 60px 20px;
    text-align: center;
}"""
            
            css_file = temp_path / 'styles.css'
            css_file.write_text(css_content)
            
            print(f"📁 Created mock website files in: {temp_dir}")
            print(f"📄 Files: {list(os.listdir(temp_dir))}")
            
            # Test subdomain deployment
            print(f"☁️ Deploying to subdomain: {website.subdomain}.hero365.ai")
            adapter = Hero365SubdomainAdapter()
            result = await adapter.deploy_to_subdomain(website, temp_dir)
            
            print(f"📊 Deployment result: {result}")
            
            if hasattr(result, 'success') and result.success:
                website_url = f"https://{website.subdomain}.hero365.ai"
                print(f"✅ SUCCESS! Website deployed to: {website_url}")
                print(f"🌐 You can now visit: {website_url}")
                return True
            else:
                print("❌ Deployment failed")
                if hasattr(result, 'error'):
                    print(f"Error: {result.error}")
                return False
                
    except Exception as e:
        print(f"❌ Test failed: {str(e)}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = asyncio.run(test_direct_deployment())
    if success:
        print("\n🎉 Direct deployment test PASSED!")
    else:
        print("\n💥 Direct deployment test FAILED!")
