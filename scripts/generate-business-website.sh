#!/bin/bash

# Generate Business-Specific Website
# Usage: ./scripts/generate-business-website.sh [business_id] [business_name] [business_email] [business_phone]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🏗️  Hero365 Business Website Generator${NC}"
echo "=================================="

# Validate arguments
if [ $# -lt 4 ]; then
    echo -e "${RED}❌ Error: Missing required arguments${NC}"
    echo ""
    echo "Usage: $0 <business_id> <business_name> <business_email> <business_phone>"
    echo ""
    echo "Examples:"
    echo "  $0 'a1b2c3d4-e5f6-7890-1234-567890abcdef' 'Austin Elite HVAC' 'info@austinelitehvac.com' '(512) 555-COOL'"
    echo "  $0 'b2c3d4e5-f6a7-1234-5678-90abcdef1234' 'Miami Pro Plumbing' 'service@miamiplumbing.com' '(305) 555-PIPE'"
    exit 1
fi

# Extract arguments
BUSINESS_ID="$1"
BUSINESS_NAME="$2"
BUSINESS_EMAIL="$3"
BUSINESS_PHONE="$4"

echo -e "${YELLOW}📋 Business Configuration:${NC}"
echo "  ID: $BUSINESS_ID"
echo "  Name: $BUSINESS_NAME" 
echo "  Email: $BUSINESS_EMAIL"
echo "  Phone: $BUSINESS_PHONE"
echo ""

# Validate business ID format (basic UUID check)
if [[ ! $BUSINESS_ID =~ ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ ]]; then
    echo -e "${RED}❌ Error: Business ID must be a valid UUID${NC}"
    echo "  Expected format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
    echo "  Received: $BUSINESS_ID"
    exit 1
fi

# Change to website-builder directory
cd "$(dirname "$0")/../website-builder"

echo -e "${BLUE}🔧 Setting up environment variables...${NC}"

# Create .env.local file with business-specific configuration
cat > .env.local << EOF
# Generated by generate-business-website.sh
# Business: $BUSINESS_NAME
# Generated at: $(date -u +"%Y-%m-%dT%H:%M:%SZ")

# Business Configuration
NEXT_PUBLIC_BUSINESS_ID=$BUSINESS_ID
NEXT_PUBLIC_BUSINESS_NAME=$BUSINESS_NAME
NEXT_PUBLIC_BUSINESS_EMAIL=$BUSINESS_EMAIL
NEXT_PUBLIC_BUSINESS_PHONE=$BUSINESS_PHONE

# API Configuration
NEXT_PUBLIC_API_URL=http://127.0.0.1:8000

# Development Settings
NODE_ENV=production
NEXT_PUBLIC_ENVIRONMENT=production
EOF

echo -e "${GREEN}✅ Environment variables configured${NC}"

# Generate business-specific config file
echo -e "${BLUE}📝 Generating business configuration...${NC}"

# Fetch business data from API
API_URL="http://127.0.0.1:8000/api/v1/public/professional/profile/$BUSINESS_ID"
echo "  Fetching business data from: $API_URL"

# Use curl to fetch business data, with fallback if API is not available
if BUSINESS_DATA=$(curl -s "$API_URL" 2>/dev/null) && [ -n "$BUSINESS_DATA" ] && [ "$BUSINESS_DATA" != "null" ]; then
    echo -e "${GREEN}✅ Business data loaded from API${NC}"
    
    # Generate config with API data
    cat > config/business-config.json << EOF
{
  "businessId": "$BUSINESS_ID",
  "environment": "production",
  "businessData": $BUSINESS_DATA,
  "apiConfig": {
    "baseUrl": "http://127.0.0.1:8000",
    "timeout": 30000,
    "retries": 1
  },
  "websiteConfig": {
    "baseUrl": "https://$BUSINESS_ID.hero365.ai"
  },
  "features": {
    "analytics": true,
    "errorReporting": true,
    "debugMode": false,
    "voiceAgent": true,
    "bookingWidget": true
  },
  "generatedAt": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
}
EOF
else
    echo -e "${YELLOW}⚠️  API not available, using basic configuration${NC}"
    
    # Generate config with provided data
    cat > config/business-config.json << EOF
{
  "businessId": "$BUSINESS_ID",
  "environment": "production",
  "businessData": {
    "business_id": "$BUSINESS_ID",
    "business_name": "$BUSINESS_NAME",
    "email": "$BUSINESS_EMAIL",
    "phone": "$BUSINESS_PHONE",
    "trade_type": "professional_services",
    "description": "Professional services for your home and business needs.",
    "service_areas": [],
    "emergency_service": true,
    "years_in_business": 5,
    "license_number": "LICENSE123",
    "insurance_verified": true,
    "average_rating": 4.9,
    "total_reviews": 50,
    "certifications": []
  },
  "apiConfig": {
    "baseUrl": "http://127.0.0.1:8000",
    "timeout": 30000,
    "retries": 1
  },
  "websiteConfig": {
    "baseUrl": "https://$BUSINESS_ID.hero365.ai"
  },
  "features": {
    "analytics": true,
    "errorReporting": true,
    "debugMode": false,
    "voiceAgent": true,
    "bookingWidget": true
  },
  "generatedAt": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
}
EOF
fi

echo -e "${GREEN}✅ Business configuration generated${NC}"

# Install dependencies if needed
if [ ! -d "node_modules" ]; then
    echo -e "${BLUE}📦 Installing dependencies...${NC}"
    npm install
fi

# Build the website
echo -e "${BLUE}🏗️  Building website for $BUSINESS_NAME...${NC}"
npm run build

if [ $? -eq 0 ]; then
    echo ""
    echo -e "${GREEN}🎉 SUCCESS! Website generated for $BUSINESS_NAME${NC}"
    echo ""
    echo -e "${BLUE}📁 Generated files:${NC}"
    echo "  • .env.local (environment variables)"
    echo "  • config/business-config.json (business configuration)"
    echo "  • .next/ (built website)"
    echo ""
    echo -e "${BLUE}🚀 Next steps:${NC}"
    echo "  1. Start the website: npm run start"
    echo "  2. Deploy to production: npm run deploy"
    echo "  3. Custom domain: Configure DNS for $BUSINESS_NAME"
    echo ""
    echo -e "${YELLOW}🔗 Local preview: http://localhost:3000${NC}"
else
    echo -e "${RED}❌ Build failed! Check the output above for errors.${NC}"
    exit 1
fi
