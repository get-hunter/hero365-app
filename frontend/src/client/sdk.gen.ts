// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  ActivitiesCreateActivityData,
  ActivitiesCreateActivityResponse,
  ActivitiesGetActivityData,
  ActivitiesGetActivityResponse,
  ActivitiesUpdateActivityData,
  ActivitiesUpdateActivityResponse,
  ActivitiesDeleteActivityData,
  ActivitiesDeleteActivityResponse,
  ActivitiesSearchActivitiesData,
  ActivitiesSearchActivitiesResponse,
  ActivitiesGetUserActivitiesData,
  ActivitiesGetUserActivitiesResponse,
  ActivitiesGetOverdueActivitiesData,
  ActivitiesGetOverdueActivitiesResponse,
  ActivitiesGetUpcomingActivitiesData,
  ActivitiesGetUpcomingActivitiesResponse,
  ActivitiesGetContactTimelineData,
  ActivitiesGetContactTimelineResponse,
  ActivitiesBulkUpdateActivitiesData,
  ActivitiesBulkUpdateActivitiesResponse,
  ActivitiesCreateActivityTemplateData,
  ActivitiesCreateActivityTemplateResponse,
  ActivitiesGetActivityTemplatesData,
  ActivitiesGetActivityTemplatesResponse,
  ActivitiesGetActivityStatisticsData,
  ActivitiesGetActivityStatisticsResponse,
  ActivitiesGetContactActivitySummaryData,
  ActivitiesGetContactActivitySummaryResponse,
  ActivitiesGetPendingRemindersResponse,
  ActivitiesMarkReminderSentData,
  ActivitiesMarkReminderSentResponse,
  ActivitiesGetDashboardActivitiesResponse,
  AuthSignUpData,
  AuthSignUpResponse,
  AuthSignUpWithPhoneData,
  AuthSignUpWithPhoneResponse,
  AuthSignInData,
  AuthSignInResponse,
  AuthSignInWithPhoneData,
  AuthSignInWithPhoneResponse,
  AuthSendOtpData,
  AuthSendOtpResponse,
  AuthVerifyOtpData,
  AuthVerifyOtpResponse,
  AuthOauthLoginData,
  AuthOauthLoginResponse,
  AuthSignOutResponse,
  AuthRefreshTokenData,
  AuthRefreshTokenResponse,
  AuthPasswordRecoveryData,
  AuthPasswordRecoveryResponse,
  AuthAppleSignInData,
  AuthAppleSignInResponse,
  AuthGoogleSignInData,
  AuthGoogleSignInResponse,
  AuthRevokeUserTokensData,
  AuthRevokeUserTokensResponse,
  BusinessContextGetCurrentBusinessContextResponse,
  BusinessContextSwitchBusinessContextData,
  BusinessContextSwitchBusinessContextResponse,
  BusinessContextGetAvailableBusinessesResponse,
  BusinessContextRefreshBusinessContextTokenResponse,
  BusinessesDebugEndpointResponse,
  BusinessesCreateBusinessData,
  BusinessesCreateBusinessResponse,
  BusinessesGetMyBusinessesData,
  BusinessesGetMyBusinessesResponse,
  BusinessesInviteTeamMemberData,
  BusinessesInviteTeamMemberResponse,
  BusinessesAcceptInvitationData,
  BusinessesAcceptInvitationResponse,
  BusinessesGetBusinessDetailData,
  BusinessesGetBusinessDetailResponse,
  BusinessesUpdateBusinessData,
  BusinessesUpdateBusinessResponse,
  BusinessesGetBusinessMembersData,
  BusinessesGetBusinessMembersResponse,
  BusinessesUpdateMemberRoleData,
  BusinessesUpdateMemberRoleResponse,
  BusinessesRemoveTeamMemberData,
  BusinessesRemoveTeamMemberResponse,
  BusinessesGetBusinessInvitationsData,
  BusinessesGetBusinessInvitationsResponse,
  BusinessesCancelInvitationData,
  BusinessesCancelInvitationResponse,
  BusinessesDeclineInvitationData,
  BusinessesDeclineInvitationResponse,
  CreateContactNoSlashData,
  CreateContactNoSlashResponse,
  ListContactsNoSlashData,
  ListContactsNoSlashResponse,
  ContactsCreateContactData,
  ContactsCreateContactResponse,
  ContactsListContactsData,
  ContactsListContactsResponse,
  ContactsGetContactData,
  ContactsGetContactResponse,
  ContactsUpdateContactData,
  ContactsUpdateContactResponse,
  ContactsDeleteContactData,
  ContactsDeleteContactResponse,
  ContactsSearchContactsData,
  ContactsSearchContactsResponse,
  ContactsBulkUpdateContactsData,
  ContactsBulkUpdateContactsResponse,
  ContactsConvertContactTypeData,
  ContactsConvertContactTypeResponse,
  ContactsAssignContactsData,
  ContactsAssignContactsResponse,
  ContactsManageContactTagsData,
  ContactsManageContactTagsResponse,
  ContactsMarkContactContactedData,
  ContactsMarkContactContactedResponse,
  ContactsGetContactStatisticsResponse,
  ContactsAddContactInteractionData,
  ContactsAddContactInteractionResponse,
  ContactsGetContactInteractionsData,
  ContactsGetContactInteractionsResponse,
  ContactsUpdateContactStatusData,
  ContactsUpdateContactStatusResponse,
  CreateEstimateNoSlashData,
  CreateEstimateNoSlashResponse,
  ListEstimatesNoSlashData,
  ListEstimatesNoSlashResponse,
  EstimatesCreateEstimateData,
  EstimatesCreateEstimateResponse,
  EstimatesListEstimatesData,
  EstimatesListEstimatesResponse,
  EstimatesCreateEstimateFromTemplateData,
  EstimatesCreateEstimateFromTemplateResponse,
  EstimatesGetNextEstimateNumberData,
  EstimatesGetNextEstimateNumberResponse,
  EstimatesGetEstimateData,
  EstimatesGetEstimateResponse,
  EstimatesUpdateEstimateData,
  EstimatesUpdateEstimateResponse,
  EstimatesDeleteEstimateData,
  EstimatesDeleteEstimateResponse,
  EstimatesSearchEstimatesData,
  EstimatesSearchEstimatesResponse,
  EstimatesUpdateEstimateStatusData,
  EstimatesUpdateEstimateStatusResponse,
  EstimatesConvertEstimateToInvoiceData,
  EstimatesConvertEstimateToInvoiceResponse,
  HealthHealthCheckResponse,
  IntelligentSchedulingOptimizeScheduleData,
  IntelligentSchedulingOptimizeScheduleResponse,
  IntelligentSchedulingAdaptScheduleRealtimeData,
  IntelligentSchedulingAdaptScheduleRealtimeResponse,
  IntelligentSchedulingGetSchedulingAnalyticsData,
  IntelligentSchedulingGetSchedulingAnalyticsResponse,
  IntelligentSchedulingGetSchedulingPredictionsData,
  IntelligentSchedulingGetSchedulingPredictionsResponse,
  IntelligentSchedulingGetRealtimeScheduleStatusResponse,
  IntelligentSchedulingUpdateUserLocationData,
  IntelligentSchedulingUpdateUserLocationResponse,
  IntelligentSchedulingGetOptimizationHistoryData,
  IntelligentSchedulingGetOptimizationHistoryResponse,
  IntelligentSchedulingCancelOptimizationData,
  IntelligentSchedulingCancelOptimizationResponse,
  IntelligentSchedulingGetAvailableTimeSlotsData,
  IntelligentSchedulingGetAvailableTimeSlotsResponse,
  IntelligentSchedulingBookTimeSlotData,
  IntelligentSchedulingBookTimeSlotResponse,
  IntelligentSchedulingCheckSlotAvailabilityData,
  IntelligentSchedulingCheckSlotAvailabilityResponse,
  IntelligentSchedulingBulkCheckSlotAvailabilityData,
  IntelligentSchedulingBulkCheckSlotAvailabilityResponse,
  IntelligentSchedulingGetWorkingHoursTemplatesResponse,
  IntelligentSchedulingCreateWorkingHoursTemplateData,
  IntelligentSchedulingCreateWorkingHoursTemplateResponse,
  IntelligentSchedulingSetUserWorkingHoursData,
  IntelligentSchedulingSetUserWorkingHoursResponse,
  IntelligentSchedulingCreateCalendarEventData,
  IntelligentSchedulingCreateCalendarEventResponse,
  IntelligentSchedulingGetCalendarEventsData,
  IntelligentSchedulingGetCalendarEventsResponse,
  IntelligentSchedulingDeleteCalendarEventData,
  IntelligentSchedulingDeleteCalendarEventResponse,
  IntelligentSchedulingCreateTimeOffRequestData,
  IntelligentSchedulingCreateTimeOffRequestResponse,
  IntelligentSchedulingApproveTimeOffRequestData,
  IntelligentSchedulingApproveTimeOffRequestResponse,
  IntelligentSchedulingGetTimeOffRequestsData,
  IntelligentSchedulingGetTimeOffRequestsResponse,
  IntelligentSchedulingCheckUserAvailabilityData,
  IntelligentSchedulingCheckUserAvailabilityResponse,
  IntelligentSchedulingGetTeamAvailabilitySummaryData,
  IntelligentSchedulingGetTeamAvailabilitySummaryResponse,
  IntelligentSchedulingUpdateCalendarPreferencesData,
  IntelligentSchedulingUpdateCalendarPreferencesResponse,
  IntelligentSchedulingGetCalendarPreferencesData,
  IntelligentSchedulingGetCalendarPreferencesResponse,
  CreateInvoiceNoSlashData,
  CreateInvoiceNoSlashResponse,
  ListInvoicesNoSlashData,
  ListInvoicesNoSlashResponse,
  InvoicesCreateInvoiceData,
  InvoicesCreateInvoiceResponse,
  InvoicesListInvoicesData,
  InvoicesListInvoicesResponse,
  InvoicesCreateInvoiceFromEstimateData,
  InvoicesCreateInvoiceFromEstimateResponse,
  InvoicesGetNextInvoiceNumberData,
  InvoicesGetNextInvoiceNumberResponse,
  InvoicesGetInvoiceData,
  InvoicesGetInvoiceResponse,
  InvoicesUpdateInvoiceData,
  InvoicesUpdateInvoiceResponse,
  InvoicesDeleteInvoiceData,
  InvoicesDeleteInvoiceResponse,
  InvoicesProcessPaymentData,
  InvoicesProcessPaymentResponse,
  InvoicesSearchInvoicesData,
  InvoicesSearchInvoicesResponse,
  CreateJobNoSlashData,
  CreateJobNoSlashResponse,
  CreateJobNoSlash1Data,
  CreateJobNoSlash1Response,
  ListJobsNoSlashData,
  ListJobsNoSlashResponse,
  ListJobsNoSlash1Data,
  ListJobsNoSlash1Response,
  JobsCreateJobData,
  JobsCreateJobResponse,
  JobsCreateJob1Data,
  JobsCreateJob1Response,
  JobsListJobsData,
  JobsListJobsResponse,
  JobsListJobs1Data,
  JobsListJobs1Response,
  JobsGetJobData,
  JobsGetJobResponse,
  JobsGetJob1Data,
  JobsGetJob1Response,
  JobsUpdateJobData,
  JobsUpdateJobResponse,
  JobsUpdateJob1Data,
  JobsUpdateJob1Response,
  JobsDeleteJobData,
  JobsDeleteJobResponse,
  JobsDeleteJob1Data,
  JobsDeleteJob1Response,
  JobsSearchJobsData,
  JobsSearchJobsResponse,
  JobsSearchJobs1Data,
  JobsSearchJobs1Response,
  JobsUpdateJobStatusData,
  JobsUpdateJobStatusResponse,
  JobsUpdateJobStatus1Data,
  JobsUpdateJobStatus1Response,
  JobsAssignJobData,
  JobsAssignJobResponse,
  JobsAssignJob1Data,
  JobsAssignJob1Response,
  JobsBulkUpdateJobsData,
  JobsBulkUpdateJobsResponse,
  JobsBulkUpdateJobs1Data,
  JobsBulkUpdateJobs1Response,
  JobsGetJobStatisticsResponse,
  JobsGetJobStatistics1Response,
  JobsGetUserWorkloadData,
  JobsGetUserWorkloadResponse,
  JobsGetUserWorkload1Data,
  JobsGetUserWorkload1Response,
  JobsGetDailyScheduleData,
  JobsGetDailyScheduleResponse,
  JobsGetDailySchedule1Data,
  JobsGetDailySchedule1Response,
  JobsStartJobData,
  JobsStartJobResponse,
  JobsStartJob1Data,
  JobsStartJob1Response,
  JobsCompleteJobData,
  JobsCompleteJobResponse,
  JobsCompleteJob1Data,
  JobsCompleteJob1Response,
  JobsCancelJobData,
  JobsCancelJobResponse,
  JobsCancelJob1Data,
  JobsCancelJob1Response,
  MiddlewareHealthGetMiddlewareHealthResponse,
  MiddlewareHealthTestMiddlewareStackResponse,
  MiddlewareHealthGetMiddlewareConfigResponse,
  MiddlewareHealthTestAuthenticationRequiredResponse,
  MiddlewareHealthTestBusinessContextRequiredResponse,
  MobileVoiceIntegrationStartVoiceSessionData,
  MobileVoiceIntegrationStartVoiceSessionResponse,
  MobileVoiceIntegrationGetSessionStatusData,
  MobileVoiceIntegrationGetSessionStatusResponse,
  MobileVoiceIntegrationUpdateSessionStateData,
  MobileVoiceIntegrationUpdateSessionStateResponse,
  MobileVoiceIntegrationEndVoiceSessionData,
  MobileVoiceIntegrationEndVoiceSessionResponse,
  MobileVoiceIntegrationVoiceSystemHealthResponse,
  MobileVoiceIntegrationGetAgentCapabilitiesResponse,
  CreateProductNoSlashData,
  CreateProductNoSlashResponse,
  ListProductsNoSlashData,
  ListProductsNoSlashResponse,
  ProductsCreateProductData,
  ProductsCreateProductResponse,
  ProductsListProductsData,
  ProductsListProductsResponse,
  ProductsGetProductData,
  ProductsGetProductResponse,
  ProductsUpdateProductData,
  ProductsUpdateProductResponse,
  ProductsDeleteProductData,
  ProductsDeleteProductResponse,
  ProductsSearchProductsData,
  ProductsSearchProductsResponse,
  ProductsAdjustStockData,
  ProductsAdjustStockResponse,
  ProductsReserveStockData,
  ProductsReserveStockResponse,
  ProductsGetReorderSuggestionsData,
  ProductsGetReorderSuggestionsResponse,
  ProjectsCreateProjectData,
  ProjectsCreateProjectResponse,
  ProjectsCreateProject1Data,
  ProjectsCreateProject1Response,
  ProjectsListProjectsData,
  ProjectsListProjectsResponse,
  ProjectsListProjects1Data,
  ProjectsListProjects1Response,
  ProjectsGetProjectData,
  ProjectsGetProjectResponse,
  ProjectsGetProject1Data,
  ProjectsGetProject1Response,
  ProjectsUpdateProjectData,
  ProjectsUpdateProjectResponse,
  ProjectsUpdateProject1Data,
  ProjectsUpdateProject1Response,
  ProjectsDeleteProjectData,
  ProjectsDeleteProjectResponse,
  ProjectsDeleteProject1Data,
  ProjectsDeleteProject1Response,
  ProjectsSearchProjectsData,
  ProjectsSearchProjectsResponse,
  ProjectsSearchProjects1Data,
  ProjectsSearchProjects1Response,
  ProjectsGetProjectsByStatusData,
  ProjectsGetProjectsByStatusResponse,
  ProjectsGetProjectsByStatus1Data,
  ProjectsGetProjectsByStatus1Response,
  ProjectsGetProjectStatisticsResponse,
  ProjectsGetProjectStatistics1Response,
  ProjectsGetBudgetSummaryData,
  ProjectsGetBudgetSummaryResponse,
  ProjectsGetBudgetSummary1Data,
  ProjectsGetBudgetSummary1Response,
  ProjectsAssignTeamMembersData,
  ProjectsAssignTeamMembersResponse,
  ProjectsAssignTeamMembers1Data,
  ProjectsAssignTeamMembers1Response,
  ProjectsCreateProjectTemplateData,
  ProjectsCreateProjectTemplateResponse,
  ProjectsCreateProjectTemplate1Data,
  ProjectsCreateProjectTemplate1Response,
  ProjectsCreateProjectFromTemplateData,
  ProjectsCreateProjectFromTemplateResponse,
  ProjectsCreateProjectFromTemplate1Data,
  ProjectsCreateProjectFromTemplate1Response,
  ProjectsAssignJobsToProjectData,
  ProjectsAssignJobsToProjectResponse,
  ProjectsAssignJobsToProject1Data,
  ProjectsAssignJobsToProject1Response,
  ProjectsGetProjectJobsData,
  ProjectsGetProjectJobsResponse,
  ProjectsGetProjectJobs1Data,
  ProjectsGetProjectJobs1Response,
  ProjectsRemoveJobFromProjectData,
  ProjectsRemoveJobFromProjectResponse,
  ProjectsRemoveJobFromProject1Data,
  ProjectsRemoveJobFromProject1Response,
  PurchaseOrdersCreatePurchaseOrderData,
  PurchaseOrdersCreatePurchaseOrderResponse,
  PurchaseOrdersListPurchaseOrdersData,
  PurchaseOrdersListPurchaseOrdersResponse,
  PurchaseOrdersGetPurchaseOrderData,
  PurchaseOrdersGetPurchaseOrderResponse,
  PurchaseOrdersApprovePurchaseOrderData,
  PurchaseOrdersApprovePurchaseOrderResponse,
  PurchaseOrdersSendPurchaseOrderData,
  PurchaseOrdersSendPurchaseOrderResponse,
  PurchaseOrdersReceivePurchaseOrderData,
  PurchaseOrdersReceivePurchaseOrderResponse,
  PurchaseOrdersSearchPurchaseOrdersData,
  PurchaseOrdersSearchPurchaseOrdersResponse,
  PurchaseOrdersGetPendingApprovalOrdersData,
  PurchaseOrdersGetPendingApprovalOrdersResponse,
  PurchaseOrdersGetPendingReceiptOrdersData,
  PurchaseOrdersGetPendingReceiptOrdersResponse,
  SuppliersCreateSupplierData,
  SuppliersCreateSupplierResponse,
  SuppliersListSuppliersData,
  SuppliersListSuppliersResponse,
  SuppliersGetSupplierData,
  SuppliersGetSupplierResponse,
  SuppliersUpdateSupplierData,
  SuppliersUpdateSupplierResponse,
  SuppliersDeleteSupplierData,
  SuppliersDeleteSupplierResponse,
  SuppliersSearchSuppliersData,
  SuppliersSearchSuppliersResponse,
  SuppliersGetSupplierPerformanceData,
  SuppliersGetSupplierPerformanceResponse,
  SuppliersGetSupplierOrdersData,
  SuppliersGetSupplierOrdersResponse,
  TemplatesGetTemplatesData,
  TemplatesGetTemplatesResponse,
  TemplatesCreateTemplateData,
  TemplatesCreateTemplateResponse,
  TemplatesGetInvoiceTemplatesData,
  TemplatesGetInvoiceTemplatesResponse,
  TemplatesGetEstimateTemplatesData,
  TemplatesGetEstimateTemplatesResponse,
  TemplatesGetContractTemplatesData,
  TemplatesGetContractTemplatesResponse,
  TemplatesGetTemplatesByTypeData,
  TemplatesGetTemplatesByTypeResponse,
  TemplatesGetDefaultTemplateData,
  TemplatesGetDefaultTemplateResponse,
  TemplatesValidateTemplateAccessData,
  TemplatesValidateTemplateAccessResponse,
  TemplatesGetTemplateData,
  TemplatesGetTemplateResponse,
  TemplatesUpdateTemplateData,
  TemplatesUpdateTemplateResponse,
  TemplatesDeleteTemplateData,
  TemplatesDeleteTemplateResponse,
  TemplatesSetDefaultTemplateData,
  TemplatesSetDefaultTemplateResponse,
  TemplatesCloneTemplateData,
  TemplatesCloneTemplateResponse,
  UsersGetCurrentUserProfileResponse,
  UsersUpdateUserBusinessContextData,
  UsersUpdateUserBusinessContextResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
} from "./types.gen"

export class ActivitiesService {
  /**
   * Create Activity
   * Create a new activity.
   *
   * Creates a new activity for a contact with optional template-based creation,
   * participants, and reminders. Requires 'edit_contacts' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ActivityResponse Successful Response
   * @throws ApiError
   */
  public static createActivity(
    data: ActivitiesCreateActivityData,
  ): CancelablePromise<ActivitiesCreateActivityResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/activities",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Activity
   * Get an activity by ID.
   *
   * Retrieves detailed information about a specific activity.
   * Requires 'view_contacts' permission.
   * @param data The data for the request.
   * @param data.activityId Activity ID
   * @returns ActivityResponse Successful Response
   * @throws ApiError
   */
  public static getActivity(
    data: ActivitiesGetActivityData,
  ): CancelablePromise<ActivitiesGetActivityResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/activities/{activity_id}",
      path: {
        activity_id: data.activityId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Activity
   * Update an existing activity.
   *
   * Updates activity details, status, scheduling, and assignments.
   * Requires 'edit_contacts' permission.
   * @param data The data for the request.
   * @param data.activityId Activity ID
   * @param data.requestBody
   * @returns ActivityResponse Successful Response
   * @throws ApiError
   */
  public static updateActivity(
    data: ActivitiesUpdateActivityData,
  ): CancelablePromise<ActivitiesUpdateActivityResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/activities/{activity_id}",
      path: {
        activity_id: data.activityId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Activity
   * Delete an activity.
   *
   * Permanently deletes an activity and all associated data.
   * Requires 'delete_contacts' permission.
   * @param data The data for the request.
   * @param data.activityId Activity ID
   * @returns app__api__schemas__activity_schemas__MessageResponse Successful Response
   * @throws ApiError
   */
  public static deleteActivity(
    data: ActivitiesDeleteActivityData,
  ): CancelablePromise<ActivitiesDeleteActivityResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/activities/{activity_id}",
      path: {
        activity_id: data.activityId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Search Activities
   * Search activities with advanced filtering.
   *
   * Provides comprehensive search and filtering capabilities for activities
   * including date ranges, status, priority, assignment, and text search.
   * Requires 'view_contacts' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.skip
   * @param data.limit
   * @returns ActivityListResponse Successful Response
   * @throws ApiError
   */
  public static searchActivities(
    data: ActivitiesSearchActivitiesData,
  ): CancelablePromise<ActivitiesSearchActivitiesResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/activities/search",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get User Activities
   * Get activities assigned to the current user.
   *
   * Retrieves activities assigned to the authenticated user with optional filtering.
   * Requires 'view_contacts' permission.
   * @param data The data for the request.
   * @param data.statuses Filter by activity statuses
   * @param data.startDate Filter activities after this date
   * @param data.endDate Filter activities before this date
   * @param data.skip
   * @param data.limit
   * @returns ActivityListResponse Successful Response
   * @throws ApiError
   */
  public static getUserActivities(
    data: ActivitiesGetUserActivitiesData = {},
  ): CancelablePromise<ActivitiesGetUserActivitiesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/activities/user/assigned",
      query: {
        statuses: data.statuses,
        start_date: data.startDate,
        end_date: data.endDate,
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Overdue Activities
   * Get overdue activities.
   *
   * Retrieves all overdue activities for the business or a specific user.
   * Requires 'view_contacts' permission.
   * @param data The data for the request.
   * @param data.assignedTo Filter by assigned user
   * @returns ActivityResponse Successful Response
   * @throws ApiError
   */
  public static getOverdueActivities(
    data: ActivitiesGetOverdueActivitiesData = {},
  ): CancelablePromise<ActivitiesGetOverdueActivitiesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/activities/overdue",
      query: {
        assigned_to: data.assignedTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Upcoming Activities
   * Get upcoming activities.
   *
   * Retrieves activities scheduled within the specified number of days.
   * Requires 'view_contacts' permission.
   * @param data The data for the request.
   * @param data.daysAhead Number of days to look ahead
   * @param data.assignedTo Filter by assigned user
   * @returns ActivityResponse Successful Response
   * @throws ApiError
   */
  public static getUpcomingActivities(
    data: ActivitiesGetUpcomingActivitiesData = {},
  ): CancelablePromise<ActivitiesGetUpcomingActivitiesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/activities/upcoming",
      query: {
        days_ahead: data.daysAhead,
        assigned_to: data.assignedTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Contact Timeline
   * Get activity timeline for a contact.
   *
   * Retrieves a chronological timeline of all activities for a specific contact
   * with optional filtering by date range and activity types.
   * Requires 'view_contacts' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.skip
   * @param data.limit
   * @returns TimelineResponse Successful Response
   * @throws ApiError
   */
  public static getContactTimeline(
    data: ActivitiesGetContactTimelineData,
  ): CancelablePromise<ActivitiesGetContactTimelineResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/activities/timeline",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Bulk Update Activities
   * Bulk update multiple activities.
   *
   * Updates multiple activities at once with the same changes.
   * Useful for batch operations like status changes or reassignments.
   * Requires 'edit_contacts' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns BulkOperationResponse Successful Response
   * @throws ApiError
   */
  public static bulkUpdateActivities(
    data: ActivitiesBulkUpdateActivitiesData,
  ): CancelablePromise<ActivitiesBulkUpdateActivitiesResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/activities/bulk-update",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Activity Template
   * Create a new activity template.
   *
   * Creates a reusable template for standardizing activity creation.
   * Requires 'edit_contacts' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ActivityTemplateResponse Successful Response
   * @throws ApiError
   */
  public static createActivityTemplate(
    data: ActivitiesCreateActivityTemplateData,
  ): CancelablePromise<ActivitiesCreateActivityTemplateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/activities/templates",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Activity Templates
   * Get activity templates for the business.
   *
   * Retrieves all active templates with optional filtering by activity type.
   * Requires 'view_contacts' permission.
   * @param data The data for the request.
   * @param data.activityType Filter by activity type
   * @returns ActivityTemplateResponse Successful Response
   * @throws ApiError
   */
  public static getActivityTemplates(
    data: ActivitiesGetActivityTemplatesData = {},
  ): CancelablePromise<ActivitiesGetActivityTemplatesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/activities/templates",
      query: {
        activity_type: data.activityType,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Activity Statistics
   * Get activity statistics for the business.
   *
   * Provides comprehensive analytics including completion rates, activity distributions,
   * and performance metrics. Requires 'view_contacts' permission.
   * @param data The data for the request.
   * @param data.startDate Statistics start date
   * @param data.endDate Statistics end date
   * @param data.userFilter Filter statistics for specific user
   * @returns ActivityStatisticsResponse Successful Response
   * @throws ApiError
   */
  public static getActivityStatistics(
    data: ActivitiesGetActivityStatisticsData = {},
  ): CancelablePromise<ActivitiesGetActivityStatisticsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/activities/statistics",
      query: {
        start_date: data.startDate,
        end_date: data.endDate,
        user_filter: data.userFilter,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Contact Activity Summary
   * Get activity summary for a specific contact.
   *
   * Provides engagement metrics and activity overview for a contact.
   * Requires 'view_contacts' permission.
   * @param data The data for the request.
   * @param data.contactId Contact ID
   * @returns ContactActivitySummaryResponse Successful Response
   * @throws ApiError
   */
  public static getContactActivitySummary(
    data: ActivitiesGetContactActivitySummaryData,
  ): CancelablePromise<ActivitiesGetContactActivitySummaryResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/activities/contacts/{contact_id}/summary",
      path: {
        contact_id: data.contactId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Pending Reminders
   * Get pending reminders for activities.
   *
   * Retrieves all reminders that are due to be sent within the next hour.
   * Requires 'view_contacts' permission.
   * @returns ActivityReminderResponse Successful Response
   * @throws ApiError
   */
  public static getPendingReminders(): CancelablePromise<ActivitiesGetPendingRemindersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/activities/reminders/pending",
    })
  }

  /**
   * Mark Reminder Sent
   * Mark a reminder as sent.
   *
   * Updates the reminder status to indicate it has been delivered.
   * Requires 'edit_contacts' permission.
   * @param data The data for the request.
   * @param data.reminderId Reminder ID
   * @param data.activityId Activity ID
   * @returns app__api__schemas__activity_schemas__MessageResponse Successful Response
   * @throws ApiError
   */
  public static markReminderSent(
    data: ActivitiesMarkReminderSentData,
  ): CancelablePromise<ActivitiesMarkReminderSentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/activities/reminders/{reminder_id}/mark-sent",
      path: {
        reminder_id: data.reminderId,
      },
      query: {
        activity_id: data.activityId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Dashboard Activities
   * Get dashboard overview of activities.
   *
   * Provides a comprehensive overview including overdue activities, upcoming tasks,
   * recent activities, statistics, and pending reminders for dashboard display.
   * Requires 'view_contacts' permission.
   * @returns DashboardActivitiesResponse Successful Response
   * @throws ApiError
   */
  public static getDashboardActivities(): CancelablePromise<ActivitiesGetDashboardActivitiesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/activities/dashboard",
    })
  }
}

export class AuthService {
  /**
   * Sign Up
   * Sign up with email and password using Supabase Auth
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static signUp(
    data: AuthSignUpData,
  ): CancelablePromise<AuthSignUpResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/auth/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Sign Up With Phone
   * Sign up with phone number using Supabase Auth
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static signUpWithPhone(
    data: AuthSignUpWithPhoneData,
  ): CancelablePromise<AuthSignUpWithPhoneResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/auth/signup/phone",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Sign In
   * Sign in with email and password using Supabase Auth
   * Note: This endpoint is mainly for documentation.
   * Frontend should use Supabase client directly for sign in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static signIn(
    data: AuthSignInData,
  ): CancelablePromise<AuthSignInResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/auth/signin",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Sign In With Phone
   * Sign in with phone number and password using Supabase Auth
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static signInWithPhone(
    data: AuthSignInWithPhoneData,
  ): CancelablePromise<AuthSignInWithPhoneResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/auth/signin/phone",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Send Otp
   * Send OTP to phone number for passwordless authentication
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static sendOtp(
    data: AuthSendOtpData,
  ): CancelablePromise<AuthSendOtpResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/auth/otp/send",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Verify Otp
   * Verify OTP for phone number authentication
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static verifyOtp(
    data: AuthVerifyOtpData,
  ): CancelablePromise<AuthVerifyOtpResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/auth/otp/verify",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Oauth Login
   * OAuth login endpoint - returns redirect URL for OAuth flow
   * @param data The data for the request.
   * @param data.provider
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static oauthLogin(
    data: AuthOauthLoginData,
  ): CancelablePromise<AuthOauthLoginResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/auth/oauth/{provider}",
      path: {
        provider: data.provider,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Sign Out
   * Sign out endpoint - client should handle token cleanup
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static signOut(): CancelablePromise<AuthSignOutResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/auth/signout",
    })
  }

  /**
   * Refresh Token
   * Refresh access token using refresh token
   * @param data The data for the request.
   * @param data.refreshToken
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static refreshToken(
    data: AuthRefreshTokenData,
  ): CancelablePromise<AuthRefreshTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/auth/refresh",
      query: {
        refresh_token: data.refreshToken,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Password Recovery
   * Request password recovery email
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static passwordRecovery(
    data: AuthPasswordRecoveryData,
  ): CancelablePromise<AuthPasswordRecoveryResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/auth/password-recovery",
      query: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Apple Sign In
   * Handle Apple Sign-In using ID token from iOS app
   * @param data The data for the request.
   * @param data.requestBody
   * @returns OAuthSignInResponse Successful Response
   * @throws ApiError
   */
  public static appleSignIn(
    data: AuthAppleSignInData,
  ): CancelablePromise<AuthAppleSignInResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/auth/apple/signin",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Google Sign In
   * Handle Google Sign-In using ID token from iOS app
   * @param data The data for the request.
   * @param data.requestBody
   * @returns OAuthSignInResponse Successful Response
   * @throws ApiError
   */
  public static googleSignIn(
    data: AuthGoogleSignInData,
  ): CancelablePromise<AuthGoogleSignInResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/auth/google/signin",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Revoke User Tokens
   * Revoke all tokens for a specific user (force sign out).
   *
   * This endpoint allows admins to invalidate all JWT tokens for a user,
   * forcing them to sign in again. Useful when a user account is compromised
   * or when you need to force a logout.
   * @param data The data for the request.
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static revokeUserTokens(
    data: AuthRevokeUserTokensData,
  ): CancelablePromise<AuthRevokeUserTokensResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/revoke-tokens/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class BusinessContextService {
  /**
   * Get Current Business Context
   * Get current business context information.
   *
   * Returns the user's current business context and list of available businesses.
   * @returns BusinessContextInfoResponse Successful Response
   * @throws ApiError
   */
  public static getCurrentBusinessContext(): CancelablePromise<BusinessContextGetCurrentBusinessContextResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/business-context/current",
    })
  }

  /**
   * Switch Business Context
   * Switch user's current business context.
   *
   * Changes the user's active business context and returns a new JWT token
   * with the updated business context.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns BusinessContextResponse Successful Response
   * @throws ApiError
   */
  public static switchBusinessContext(
    data: BusinessContextSwitchBusinessContextData,
  ): CancelablePromise<BusinessContextSwitchBusinessContextResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/business-context/switch",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Available Businesses
   * Get list of businesses the current user can access.
   *
   * Returns a list of businesses the authenticated user is a member of.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getAvailableBusinesses(): CancelablePromise<BusinessContextGetAvailableBusinessesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/business-context/available-businesses",
    })
  }

  /**
   * Refresh Business Context Token
   * Refresh the current JWT token with updated business context.
   *
   * Useful when business memberships or permissions have changed.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static refreshBusinessContextToken(): CancelablePromise<BusinessContextRefreshBusinessContextTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/business-context/refresh-token",
    })
  }
}

export class BusinessesService {
  /**
   * Debug Endpoint
   * Debug endpoint to test if business routes are working.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static debugEndpoint(): CancelablePromise<BusinessesDebugEndpointResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/businesses/debug",
    })
  }

  /**
   * Create Business
   * Create a new business.
   *
   * Creates a new business with the current user as the owner.
   * Automatically creates an owner membership for the user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns BusinessResponse Successful Response
   * @throws ApiError
   */
  public static createBusiness(
    data: BusinessesCreateBusinessData,
  ): CancelablePromise<BusinessesCreateBusinessResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/businesses",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get My Businesses
   * Get all businesses for the current user.
   *
   * Returns businesses where the user is a member (owner, admin, employee, etc.)
   * with their membership information and business summaries.
   * @param data The data for the request.
   * @param data.skip Number of businesses to skip
   * @param data.limit Maximum number of businesses to return
   * @returns UserBusinessSummaryResponse Successful Response
   * @throws ApiError
   */
  public static getMyBusinesses(
    data: BusinessesGetMyBusinessesData = {},
  ): CancelablePromise<BusinessesGetMyBusinessesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/businesses/me",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Invite Team Member
   * Invite a team member to join a business.
   *
   * Sends an invitation to the specified email or phone number.
   * Requires the user to have team:invite permission for the business.
   * @param data The data for the request.
   * @param data.businessId
   * @param data.requestBody
   * @returns BusinessInvitationResponse Successful Response
   * @throws ApiError
   */
  public static inviteTeamMember(
    data: BusinessesInviteTeamMemberData,
  ): CancelablePromise<BusinessesInviteTeamMemberResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/businesses/{business_id}/invite",
      path: {
        business_id: data.businessId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Accept Invitation
   * Accept a business invitation.
   *
   * Accepts a pending invitation and creates a business membership for the user.
   * The invitation must be valid and not expired.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns BusinessMembershipResponse Successful Response
   * @throws ApiError
   */
  public static acceptInvitation(
    data: BusinessesAcceptInvitationData,
  ): CancelablePromise<BusinessesAcceptInvitationResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/businesses/invitations/accept",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Business Detail
   * Get detailed business information.
   *
   * Returns comprehensive business information including team members,
   * statistics, and user's role within the business.
   * @param data The data for the request.
   * @param data.businessId
   * @returns BusinessDetailResponse Successful Response
   * @throws ApiError
   */
  public static getBusinessDetail(
    data: BusinessesGetBusinessDetailData,
  ): CancelablePromise<BusinessesGetBusinessDetailResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/businesses/{business_id}",
      path: {
        business_id: data.businessId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Business
   * Update business information.
   *
   * Allows business owners and admins with proper permissions
   * to update business details.
   * @param data The data for the request.
   * @param data.businessId
   * @param data.requestBody
   * @returns BusinessResponse Successful Response
   * @throws ApiError
   */
  public static updateBusiness(
    data: BusinessesUpdateBusinessData,
  ): CancelablePromise<BusinessesUpdateBusinessResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/businesses/{business_id}",
      path: {
        business_id: data.businessId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Business Members
   * Get business team members.
   *
   * Returns a list of all active team members for the business.
   * @param data The data for the request.
   * @param data.businessId
   * @param data.skip Number of members to skip
   * @param data.limit Maximum number of members to return
   * @returns BusinessMembershipResponse Successful Response
   * @throws ApiError
   */
  public static getBusinessMembers(
    data: BusinessesGetBusinessMembersData,
  ): CancelablePromise<BusinessesGetBusinessMembersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/businesses/{business_id}/members",
      path: {
        business_id: data.businessId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Member Role
   * Update team member role and permissions.
   *
   * Allows business owners and admins to update team member
   * roles, permissions, and other membership details.
   * @param data The data for the request.
   * @param data.businessId
   * @param data.membershipId
   * @param data.requestBody
   * @returns BusinessMembershipResponse Successful Response
   * @throws ApiError
   */
  public static updateMemberRole(
    data: BusinessesUpdateMemberRoleData,
  ): CancelablePromise<BusinessesUpdateMemberRoleResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/businesses/{business_id}/members/{membership_id}",
      path: {
        business_id: data.businessId,
        membership_id: data.membershipId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Remove Team Member
   * Remove a team member from the business.
   *
   * Deactivates the team member's access to the business.
   * Business owners cannot remove themselves.
   * @param data The data for the request.
   * @param data.businessId
   * @param data.membershipId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static removeTeamMember(
    data: BusinessesRemoveTeamMemberData,
  ): CancelablePromise<BusinessesRemoveTeamMemberResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/businesses/{business_id}/members/{membership_id}",
      path: {
        business_id: data.businessId,
        membership_id: data.membershipId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Business Invitations
   * Get business invitations.
   *
   * Returns all invitations sent for the business.
   * Requires appropriate permissions to view invitations.
   * @param data The data for the request.
   * @param data.businessId
   * @param data.skip Number of invitations to skip
   * @param data.limit Maximum number of invitations to return
   * @returns BusinessInvitationResponse Successful Response
   * @throws ApiError
   */
  public static getBusinessInvitations(
    data: BusinessesGetBusinessInvitationsData,
  ): CancelablePromise<BusinessesGetBusinessInvitationsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/businesses/{business_id}/invitations",
      path: {
        business_id: data.businessId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Cancel Invitation
   * Cancel a pending invitation.
   *
   * Allows business owners, admins, or the invitation sender
   * to cancel a pending invitation.
   * @param data The data for the request.
   * @param data.invitationId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static cancelInvitation(
    data: BusinessesCancelInvitationData,
  ): CancelablePromise<BusinessesCancelInvitationResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/businesses/invitations/{invitation_id}",
      path: {
        invitation_id: data.invitationId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Decline Invitation
   * Decline a business invitation.
   *
   * Allows the invitation recipient to decline a pending invitation.
   * @param data The data for the request.
   * @param data.invitationId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static declineInvitation(
    data: BusinessesDeclineInvitationData,
  ): CancelablePromise<BusinessesDeclineInvitationResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/businesses/invitations/{invitation_id}/decline",
      path: {
        invitation_id: data.invitationId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class ContactsService {
  /**
   * Create Contact
   * Create a new contact.
   *
   * Creates a new contact for the current business with the provided information.
   * Requires 'edit_contacts' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ContactResponse Successful Response
   * @throws ApiError
   */
  public static createContactNoSlash(
    data: CreateContactNoSlashData,
  ): CancelablePromise<CreateContactNoSlashResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/contacts",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List Contacts
   * List contacts for the current business.
   *
   * Retrieves a paginated list of contacts with optional user detail information.
   * Requires 'view_contacts' permission.
   * @param data The data for the request.
   * @param data.skip Number of records to skip
   * @param data.limit Maximum number of records to return
   * @param data.includeUserDetails Level of user detail to include
   * @returns ContactListResponse Successful Response
   * @throws ApiError
   */
  public static listContactsNoSlash(
    data: ListContactsNoSlashData = {},
  ): CancelablePromise<ListContactsNoSlashResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/contacts",
      query: {
        skip: data.skip,
        limit: data.limit,
        include_user_details: data.includeUserDetails,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Contact
   * Create a new contact.
   *
   * Creates a new contact for the current business with the provided information.
   * Requires 'edit_contacts' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ContactResponse Successful Response
   * @throws ApiError
   */
  public static createContact(
    data: ContactsCreateContactData,
  ): CancelablePromise<ContactsCreateContactResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/contacts/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List Contacts
   * List contacts for the current business.
   *
   * Retrieves a paginated list of contacts with optional user detail information.
   * Requires 'view_contacts' permission.
   * @param data The data for the request.
   * @param data.skip Number of records to skip
   * @param data.limit Maximum number of records to return
   * @param data.includeUserDetails Level of user detail to include
   * @returns ContactListResponse Successful Response
   * @throws ApiError
   */
  public static listContacts(
    data: ContactsListContactsData = {},
  ): CancelablePromise<ContactsListContactsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/contacts/",
      query: {
        skip: data.skip,
        limit: data.limit,
        include_user_details: data.includeUserDetails,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Contact
   * Get a contact by ID.
   *
   * Retrieves detailed information about a specific contact with optional user data.
   * Requires 'view_contacts' permission.
   * @param data The data for the request.
   * @param data.contactId Contact ID
   * @param data.includeUserDetails Level of user detail to include
   * @returns ContactResponse Successful Response
   * @throws ApiError
   */
  public static getContact(
    data: ContactsGetContactData,
  ): CancelablePromise<ContactsGetContactResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/contacts/{contact_id}",
      path: {
        contact_id: data.contactId,
      },
      query: {
        include_user_details: data.includeUserDetails,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Contact
   * Update a contact.
   *
   * Updates an existing contact with the provided information.
   * Requires 'edit_contacts' permission.
   * @param data The data for the request.
   * @param data.contactId Contact ID
   * @param data.requestBody
   * @returns ContactResponse Successful Response
   * @throws ApiError
   */
  public static updateContact(
    data: ContactsUpdateContactData,
  ): CancelablePromise<ContactsUpdateContactResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/contacts/{contact_id}",
      path: {
        contact_id: data.contactId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Contact
   * Delete a contact.
   *
   * Permanently deletes a contact and all associated data.
   * Requires 'delete_contacts' permission.
   * @param data The data for the request.
   * @param data.contactId Contact ID
   * @returns app__api__schemas__contact_schemas__MessageResponse Successful Response
   * @throws ApiError
   */
  public static deleteContact(
    data: ContactsDeleteContactData,
  ): CancelablePromise<ContactsDeleteContactResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/contacts/{contact_id}",
      path: {
        contact_id: data.contactId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Search Contacts
   * Search contacts with advanced filtering.
   *
   * Performs advanced search across contacts with multiple filtering options.
   * Requires 'view_contacts' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ContactListResponse Successful Response
   * @throws ApiError
   */
  public static searchContacts(
    data: ContactsSearchContactsData,
  ): CancelablePromise<ContactsSearchContactsResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/contacts/search",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Bulk Update Contacts
   * Perform bulk updates on multiple contacts.
   *
   * Updates multiple contacts at once with the same changes.
   * Requires 'edit_contacts' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ContactBulkOperationResponse Successful Response
   * @throws ApiError
   */
  public static bulkUpdateContacts(
    data: ContactsBulkUpdateContactsData,
  ): CancelablePromise<ContactsBulkUpdateContactsResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/contacts/bulk-update",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Convert Contact Type
   * Convert a contact from one type to another.
   *
   * Changes the contact type and applies appropriate business logic.
   * Requires 'edit_contacts' permission.
   * @param data The data for the request.
   * @param data.contactId Contact ID
   * @param data.requestBody
   * @returns ContactResponse Successful Response
   * @throws ApiError
   */
  public static convertContactType(
    data: ContactsConvertContactTypeData,
  ): CancelablePromise<ContactsConvertContactTypeResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/contacts/{contact_id}/convert",
      path: {
        contact_id: data.contactId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Assign Contacts
   * Assign multiple contacts to a team member.
   *
   * Bulk assigns contacts to a specific user for management.
   * Requires 'edit_contacts' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ContactBulkOperationResponse Successful Response
   * @throws ApiError
   */
  public static assignContacts(
    data: ContactsAssignContactsData,
  ): CancelablePromise<ContactsAssignContactsResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/contacts/assign",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Manage Contact Tags
   * Add or remove tags from multiple contacts.
   *
   * Manages tags across multiple contacts in bulk operations.
   * Requires 'edit_contacts' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ContactBulkOperationResponse Successful Response
   * @throws ApiError
   */
  public static manageContactTags(
    data: ContactsManageContactTagsData,
  ): CancelablePromise<ContactsManageContactTagsResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/contacts/tags",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Mark Contact Contacted
   * Mark a contact as contacted.
   *
   * Updates the last contacted timestamp for tracking purposes.
   * Requires 'edit_contacts' permission.
   * @param data The data for the request.
   * @param data.contactId Contact ID
   * @returns ContactResponse Successful Response
   * @throws ApiError
   */
  public static markContactContacted(
    data: ContactsMarkContactContactedData,
  ): CancelablePromise<ContactsMarkContactContactedResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/contacts/{contact_id}/mark-contacted",
      path: {
        contact_id: data.contactId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Contact Statistics
   * Get comprehensive contact statistics.
   *
   * Returns overview statistics for all contacts in the business.
   * Requires 'view_contacts' permission.
   * @returns ContactStatisticsResponse Successful Response
   * @throws ApiError
   */
  public static getContactStatistics(): CancelablePromise<ContactsGetContactStatisticsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/contacts/statistics/overview",
    })
  }

  /**
   * Add Contact Interaction
   * Add an interaction record to a contact.
   *
   * Records a new interaction (call, email, meeting, etc.) with the contact.
   * Requires 'edit_contacts' permission.
   * @param data The data for the request.
   * @param data.contactId Contact ID
   * @param data.requestBody
   * @returns ContactInteractionResponse Successful Response
   * @throws ApiError
   */
  public static addContactInteraction(
    data: ContactsAddContactInteractionData,
  ): CancelablePromise<ContactsAddContactInteractionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/contacts/{contact_id}/interactions",
      path: {
        contact_id: data.contactId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Contact Interactions
   * Get interaction history for a contact.
   *
   * Retrieves paginated list of all interactions with the contact.
   * Requires 'view_contacts' permission.
   * @param data The data for the request.
   * @param data.contactId Contact ID
   * @param data.skip Number of records to skip
   * @param data.limit Maximum number of records to return
   * @returns ContactInteractionListResponse Successful Response
   * @throws ApiError
   */
  public static getContactInteractions(
    data: ContactsGetContactInteractionsData,
  ): CancelablePromise<ContactsGetContactInteractionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/contacts/{contact_id}/interactions",
      path: {
        contact_id: data.contactId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Contact Status
   * Update contact relationship status and lifecycle stage.
   *
   * Changes the contact's relationship status and/or lifecycle stage with business logic.
   * Requires 'edit_contacts' permission.
   * @param data The data for the request.
   * @param data.contactId Contact ID
   * @param data.requestBody
   * @returns ContactStatusUpdateResponse Successful Response
   * @throws ApiError
   */
  public static updateContactStatus(
    data: ContactsUpdateContactStatusData,
  ): CancelablePromise<ContactsUpdateContactStatusResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/contacts/{contact_id}/status",
      path: {
        contact_id: data.contactId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class EstimatesService {
  /**
   * Create Estimate
   * Create a new estimate.
   *
   * Creates a new estimate for the current business with the provided information.
   * Requires 'edit_projects' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns EstimateResponseSchema Successful Response
   * @throws ApiError
   */
  public static createEstimateNoSlash(
    data: CreateEstimateNoSlashData,
  ): CancelablePromise<CreateEstimateNoSlashResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/estimates",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List Estimates
   * List estimates.
   *
   * Retrieves a paginated list of estimates for the current business.
   * Requires 'view_projects' permission.
   * @param data The data for the request.
   * @param data.skip Number of records to skip
   * @param data.limit Maximum number of records to return
   * @param data.estimateStatus Filter by estimate status
   * @param data.contactId Filter by contact ID
   * @param data.projectId Filter by project ID
   * @param data.jobId Filter by job ID
   * @returns EstimateListResponseSchema Successful Response
   * @throws ApiError
   */
  public static listEstimatesNoSlash(
    data: ListEstimatesNoSlashData = {},
  ): CancelablePromise<ListEstimatesNoSlashResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/estimates",
      query: {
        skip: data.skip,
        limit: data.limit,
        estimate_status: data.estimateStatus,
        contact_id: data.contactId,
        project_id: data.projectId,
        job_id: data.jobId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Estimate
   * Create a new estimate.
   *
   * Creates a new estimate for the current business with the provided information.
   * Requires 'edit_projects' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns EstimateResponseSchema Successful Response
   * @throws ApiError
   */
  public static createEstimate(
    data: EstimatesCreateEstimateData,
  ): CancelablePromise<EstimatesCreateEstimateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/estimates/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List Estimates
   * List estimates.
   *
   * Retrieves a paginated list of estimates for the current business.
   * Requires 'view_projects' permission.
   * @param data The data for the request.
   * @param data.skip Number of records to skip
   * @param data.limit Maximum number of records to return
   * @param data.estimateStatus Filter by estimate status
   * @param data.contactId Filter by contact ID
   * @param data.projectId Filter by project ID
   * @param data.jobId Filter by job ID
   * @returns EstimateListResponseSchema Successful Response
   * @throws ApiError
   */
  public static listEstimates(
    data: EstimatesListEstimatesData = {},
  ): CancelablePromise<EstimatesListEstimatesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/estimates/",
      query: {
        skip: data.skip,
        limit: data.limit,
        estimate_status: data.estimateStatus,
        contact_id: data.contactId,
        project_id: data.projectId,
        job_id: data.jobId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Estimate From Template
   * Create a new estimate from a template.
   *
   * Creates a new estimate using a predefined template with customizable fields.
   * Requires 'edit_projects' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns EstimateResponseSchema Successful Response
   * @throws ApiError
   */
  public static createEstimateFromTemplate(
    data: EstimatesCreateEstimateFromTemplateData,
  ): CancelablePromise<EstimatesCreateEstimateFromTemplateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/estimates/from-template",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Next Estimate Number
   * Get the next available estimate or quote number.
   *
   * Returns the next available document number without creating an estimate.
   * This is useful for showing users what number their next document will have.
   * Requires 'view_projects' permission.
   * @param data The data for the request.
   * @param data.prefix Prefix for the document number
   * @param data.documentType Type of document: estimate or quote
   * @returns NextEstimateNumberSchema Successful Response
   * @throws ApiError
   */
  public static getNextEstimateNumber(
    data: EstimatesGetNextEstimateNumberData = {},
  ): CancelablePromise<EstimatesGetNextEstimateNumberResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/estimates/next-number",
      query: {
        prefix: data.prefix,
        document_type: data.documentType,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Estimate
   * Get an estimate by ID.
   *
   * Retrieves detailed information about a specific estimate.
   * Requires 'view_projects' permission.
   * @param data The data for the request.
   * @param data.estimateId Estimate ID
   * @returns EstimateResponseSchema Successful Response
   * @throws ApiError
   */
  public static getEstimate(
    data: EstimatesGetEstimateData,
  ): CancelablePromise<EstimatesGetEstimateResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/estimates/{estimate_id}",
      path: {
        estimate_id: data.estimateId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Estimate
   * Update an estimate.
   *
   * Updates an existing estimate with the provided information.
   * Requires 'edit_projects' permission.
   * @param data The data for the request.
   * @param data.estimateId Estimate ID
   * @param data.requestBody
   * @returns EstimateResponseSchema Successful Response
   * @throws ApiError
   */
  public static updateEstimate(
    data: EstimatesUpdateEstimateData,
  ): CancelablePromise<EstimatesUpdateEstimateResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/estimates/{estimate_id}",
      path: {
        estimate_id: data.estimateId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Estimate
   * Delete an estimate.
   *
   * Deletes an estimate. Only draft estimates can be deleted.
   * Requires 'delete_projects' permission.
   * @param data The data for the request.
   * @param data.estimateId Estimate ID
   * @returns app__api__schemas__activity_schemas__MessageResponse Successful Response
   * @throws ApiError
   */
  public static deleteEstimate(
    data: EstimatesDeleteEstimateData,
  ): CancelablePromise<EstimatesDeleteEstimateResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/estimates/{estimate_id}",
      path: {
        estimate_id: data.estimateId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Search Estimates
   * Search estimates.
   *
   * Searches estimates with various filters and criteria.
   * Requires 'view_projects' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns EstimateListResponseSchema Successful Response
   * @throws ApiError
   */
  public static searchEstimates(
    data: EstimatesSearchEstimatesData,
  ): CancelablePromise<EstimatesSearchEstimatesResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/estimates/search",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Estimate Status
   * Update estimate status.
   *
   * Updates the status of an estimate with optional notes.
   * Requires 'edit_projects' permission.
   * @param data The data for the request.
   * @param data.estimateId Estimate ID
   * @param data.requestBody
   * @returns EstimateResponseSchema Successful Response
   * @throws ApiError
   */
  public static updateEstimateStatus(
    data: EstimatesUpdateEstimateStatusData,
  ): CancelablePromise<EstimatesUpdateEstimateStatusResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/estimates/{estimate_id}/status",
      path: {
        estimate_id: data.estimateId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Convert Estimate To Invoice
   * Convert estimate to invoice.
   *
   * Converts an approved estimate to an invoice.
   * Requires 'edit_projects' permission.
   * @param data The data for the request.
   * @param data.estimateId Estimate ID
   * @param data.advancePaymentAmount Optional advance payment amount
   * @returns EstimateActionResponse Successful Response
   * @throws ApiError
   */
  public static convertEstimateToInvoice(
    data: EstimatesConvertEstimateToInvoiceData,
  ): CancelablePromise<EstimatesConvertEstimateToInvoiceResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/estimates/{estimate_id}/convert-to-invoice",
      path: {
        estimate_id: data.estimateId,
      },
      query: {
        advance_payment_amount: data.advancePaymentAmount,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class HealthService {
  /**
   * Health Check
   * Health check endpoint for infrastructure monitoring.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<HealthHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/health",
    })
  }
}

export class IntelligentSchedulingService {
  /**
   * Optimize job scheduling
   * Optimize job scheduling using intelligent algorithms with real-time data integration.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns SchedulingOptimizationResponse Successful Response
   * @throws ApiError
   */
  public static optimizeSchedule(
    data: IntelligentSchedulingOptimizeScheduleData,
  ): CancelablePromise<IntelligentSchedulingOptimizeScheduleResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/scheduling/optimize",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Adapt schedule in real-time
   * Adapt existing schedules based on real-time disruptions and conditions.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns RealTimeAdaptationResponse Successful Response
   * @throws ApiError
   */
  public static adaptScheduleRealtime(
    data: IntelligentSchedulingAdaptScheduleRealtimeData,
  ): CancelablePromise<IntelligentSchedulingAdaptScheduleRealtimeResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/scheduling/real-time-adapt",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get scheduling analytics
   * Get comprehensive scheduling performance analytics and insights.
   * @param data The data for the request.
   * @param data.startDate Analytics period start date
   * @param data.endDate Analytics period end date
   * @param data.userId Filter by specific user
   * @param data.jobType Filter by job type
   * @param data.includePredictions Include predictive insights
   * @param data.includeRecommendations Include improvement recommendations
   * @returns SchedulingAnalyticsResponse Successful Response
   * @throws ApiError
   */
  public static getSchedulingAnalytics(
    data: IntelligentSchedulingGetSchedulingAnalyticsData,
  ): CancelablePromise<IntelligentSchedulingGetSchedulingAnalyticsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/scheduling/analytics",
      query: {
        start_date: data.startDate,
        end_date: data.endDate,
        user_id: data.userId,
        job_type: data.jobType,
        include_predictions: data.includePredictions,
        include_recommendations: data.includeRecommendations,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get scheduling predictions
   * Get predictive analytics for upcoming scheduling needs and capacity planning.
   * @param data The data for the request.
   * @param data.forecastDays Number of days to forecast
   * @param data.jobTypes Filter by job types
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getSchedulingPredictions(
    data: IntelligentSchedulingGetSchedulingPredictionsData = {},
  ): CancelablePromise<IntelligentSchedulingGetSchedulingPredictionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/scheduling/analytics/predictions",
      query: {
        forecast_days: data.forecastDays,
        job_types: data.jobTypes,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get real-time schedule status
   * Get current status of all active jobs and real-time performance metrics.
   * @returns RealTimeScheduleStatusResponse Successful Response
   * @throws ApiError
   */
  public static getRealtimeScheduleStatus(): CancelablePromise<IntelligentSchedulingGetRealtimeScheduleStatusResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/scheduling/real-time/status",
    })
  }

  /**
   * Update user location
   * Update user location for real-time tracking and optimization.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns void Successful Response
   * @throws ApiError
   */
  public static updateUserLocation(
    data: IntelligentSchedulingUpdateUserLocationData,
  ): CancelablePromise<IntelligentSchedulingUpdateUserLocationResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/scheduling/real-time/update-location",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get optimization history
   * Get history of schedule optimizations and their performance.
   * @param data The data for the request.
   * @param data.days Number of days of history
   * @param data.limit Maximum number of results
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getOptimizationHistory(
    data: IntelligentSchedulingGetOptimizationHistoryData = {},
  ): CancelablePromise<IntelligentSchedulingGetOptimizationHistoryResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/scheduling/optimization-history",
      query: {
        days: data.days,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Cancel optimization
   * Cancel a running optimization process.
   * @param data The data for the request.
   * @param data.optimizationId
   * @returns void Successful Response
   * @throws ApiError
   */
  public static cancelOptimization(
    data: IntelligentSchedulingCancelOptimizationData,
  ): CancelablePromise<IntelligentSchedulingCancelOptimizationResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/scheduling/optimization/{optimization_id}",
      path: {
        optimization_id: data.optimizationId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get available time slots
   * Get available time slots for customer booking based on job requirements and preferences.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AvailableTimeSlotsResponse Successful Response
   * @throws ApiError
   */
  public static getAvailableTimeSlots(
    data: IntelligentSchedulingGetAvailableTimeSlotsData,
  ): CancelablePromise<IntelligentSchedulingGetAvailableTimeSlotsResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/scheduling/available-slots",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Book a time slot
   * Book a specific time slot for a customer and create a scheduled job.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns TimeSlotBookingResponse Successful Response
   * @throws ApiError
   */
  public static bookTimeSlot(
    data: IntelligentSchedulingBookTimeSlotData,
  ): CancelablePromise<IntelligentSchedulingBookTimeSlotResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/scheduling/book-slot",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Check slot availability
   * Check if a specific time slot is still available for booking.
   * @param data The data for the request.
   * @param data.slotId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static checkSlotAvailability(
    data: IntelligentSchedulingCheckSlotAvailabilityData,
  ): CancelablePromise<IntelligentSchedulingCheckSlotAvailabilityResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/scheduling/slots/{slot_id}/availability",
      path: {
        slot_id: data.slotId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Bulk check slot availability
   * Check availability for multiple time slots at once.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static bulkCheckSlotAvailability(
    data: IntelligentSchedulingBulkCheckSlotAvailabilityData,
  ): CancelablePromise<IntelligentSchedulingBulkCheckSlotAvailabilityResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/scheduling/slots/bulk-check",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get working hours templates
   * Get all working hours templates for the business.
   * @returns WorkingHoursTemplate Successful Response
   * @throws ApiError
   */
  public static getWorkingHoursTemplates(): CancelablePromise<IntelligentSchedulingGetWorkingHoursTemplatesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/scheduling/working-hours/templates",
    })
  }

  /**
   * Create working hours template
   * Create a new working hours template for the business.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns WorkingHoursResponse Successful Response
   * @throws ApiError
   */
  public static createWorkingHoursTemplate(
    data: IntelligentSchedulingCreateWorkingHoursTemplateData,
  ): CancelablePromise<IntelligentSchedulingCreateWorkingHoursTemplateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/scheduling/working-hours/templates",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Set user working hours
   * Set working hours for a specific user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns WorkingHoursResponse Successful Response
   * @throws ApiError
   */
  public static setUserWorkingHours(
    data: IntelligentSchedulingSetUserWorkingHoursData,
  ): CancelablePromise<IntelligentSchedulingSetUserWorkingHoursResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/scheduling/users/{user_id}/working-hours",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create calendar event
   * Create a calendar event for a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns CalendarEventResponse Successful Response
   * @throws ApiError
   */
  public static createCalendarEvent(
    data: IntelligentSchedulingCreateCalendarEventData,
  ): CancelablePromise<IntelligentSchedulingCreateCalendarEventResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/scheduling/users/{user_id}/calendar/events",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get calendar events
   * Get calendar events for a user within a date range.
   * @param data The data for the request.
   * @param data.userId
   * @param data.startDate Start date
   * @param data.endDate End date
   * @returns CalendarEvent Successful Response
   * @throws ApiError
   */
  public static getCalendarEvents(
    data: IntelligentSchedulingGetCalendarEventsData,
  ): CancelablePromise<IntelligentSchedulingGetCalendarEventsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/scheduling/users/{user_id}/calendar/events",
      path: {
        user_id: data.userId,
      },
      query: {
        start_date: data.startDate,
        end_date: data.endDate,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete calendar event
   * Delete a calendar event.
   * @param data The data for the request.
   * @param data.eventId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteCalendarEvent(
    data: IntelligentSchedulingDeleteCalendarEventData,
  ): CancelablePromise<IntelligentSchedulingDeleteCalendarEventResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/scheduling/calendar/events/{event_id}",
      path: {
        event_id: data.eventId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create time off request
   * Create a time off request for a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns TimeOffResponse Successful Response
   * @throws ApiError
   */
  public static createTimeOffRequest(
    data: IntelligentSchedulingCreateTimeOffRequestData,
  ): CancelablePromise<IntelligentSchedulingCreateTimeOffRequestResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/scheduling/users/{user_id}/time-off",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Approve/deny time off request
   * Approve or deny a time off request.
   * @param data The data for the request.
   * @param data.timeOffId
   * @param data.requestBody
   * @returns TimeOffResponse Successful Response
   * @throws ApiError
   */
  public static approveTimeOffRequest(
    data: IntelligentSchedulingApproveTimeOffRequestData,
  ): CancelablePromise<IntelligentSchedulingApproveTimeOffRequestResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/scheduling/time-off/{time_off_id}/approve",
      path: {
        time_off_id: data.timeOffId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get time off requests
   * Get time off requests for the business or specific user.
   * @param data The data for the request.
   * @param data.userId Filter by user ID
   * @param data.status Filter by status
   * @returns TimeOffRequest Successful Response
   * @throws ApiError
   */
  public static getTimeOffRequests(
    data: IntelligentSchedulingGetTimeOffRequestsData = {},
  ): CancelablePromise<IntelligentSchedulingGetTimeOffRequestsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/scheduling/time-off",
      query: {
        user_id: data.userId,
        status: data.status,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Check user availability
   * Check availability for multiple users within a time period.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AvailabilityCheckResponse Successful Response
   * @throws ApiError
   */
  public static checkUserAvailability(
    data: IntelligentSchedulingCheckUserAvailabilityData,
  ): CancelablePromise<IntelligentSchedulingCheckUserAvailabilityResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/scheduling/availability/check",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get team availability summary
   * Get comprehensive team availability summary for a date range.
   * @param data The data for the request.
   * @param data.startDate Start date
   * @param data.endDate End date
   * @returns TeamAvailabilitySummary Successful Response
   * @throws ApiError
   */
  public static getTeamAvailabilitySummary(
    data: IntelligentSchedulingGetTeamAvailabilitySummaryData,
  ): CancelablePromise<IntelligentSchedulingGetTeamAvailabilitySummaryResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/scheduling/availability/team-summary",
      query: {
        start_date: data.startDate,
        end_date: data.endDate,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update calendar preferences
   * Update user calendar and scheduling preferences.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns CalendarPreferencesResponse Successful Response
   * @throws ApiError
   */
  public static updateCalendarPreferences(
    data: IntelligentSchedulingUpdateCalendarPreferencesData,
  ): CancelablePromise<IntelligentSchedulingUpdateCalendarPreferencesResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/scheduling/users/{user_id}/calendar/preferences",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get calendar preferences
   * Get user calendar and scheduling preferences.
   * @param data The data for the request.
   * @param data.userId
   * @returns CalendarPreferences Successful Response
   * @throws ApiError
   */
  public static getCalendarPreferences(
    data: IntelligentSchedulingGetCalendarPreferencesData,
  ): CancelablePromise<IntelligentSchedulingGetCalendarPreferencesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/scheduling/users/{user_id}/calendar/preferences",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class InvoicesService {
  /**
   * Create Invoice
   * Create a new invoice.
   *
   * Creates a new invoice for the current business with the provided information.
   * Requires 'edit_projects' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns InvoiceResponseSchema Successful Response
   * @throws ApiError
   */
  public static createInvoiceNoSlash(
    data: CreateInvoiceNoSlashData,
  ): CancelablePromise<CreateInvoiceNoSlashResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/invoices",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List Invoices
   * List invoices.
   *
   * Retrieves a paginated list of invoices for the current business.
   * Requires 'view_projects' permission.
   * @param data The data for the request.
   * @param data.skip Number of records to skip
   * @param data.limit Maximum number of records to return
   * @param data.invoiceStatus Filter by invoice status
   * @param data.contactId Filter by contact ID
   * @param data.projectId Filter by project ID
   * @param data.jobId Filter by job ID
   * @param data.overdueOnly Show only overdue invoices
   * @returns InvoiceListResponseSchema Successful Response
   * @throws ApiError
   */
  public static listInvoicesNoSlash(
    data: ListInvoicesNoSlashData = {},
  ): CancelablePromise<ListInvoicesNoSlashResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/invoices",
      query: {
        skip: data.skip,
        limit: data.limit,
        invoice_status: data.invoiceStatus,
        contact_id: data.contactId,
        project_id: data.projectId,
        job_id: data.jobId,
        overdue_only: data.overdueOnly,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Invoice
   * Create a new invoice.
   *
   * Creates a new invoice for the current business with the provided information.
   * Requires 'edit_projects' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns InvoiceResponseSchema Successful Response
   * @throws ApiError
   */
  public static createInvoice(
    data: InvoicesCreateInvoiceData,
  ): CancelablePromise<InvoicesCreateInvoiceResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/invoices/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List Invoices
   * List invoices.
   *
   * Retrieves a paginated list of invoices for the current business.
   * Requires 'view_projects' permission.
   * @param data The data for the request.
   * @param data.skip Number of records to skip
   * @param data.limit Maximum number of records to return
   * @param data.invoiceStatus Filter by invoice status
   * @param data.contactId Filter by contact ID
   * @param data.projectId Filter by project ID
   * @param data.jobId Filter by job ID
   * @param data.overdueOnly Show only overdue invoices
   * @returns InvoiceListResponseSchema Successful Response
   * @throws ApiError
   */
  public static listInvoices(
    data: InvoicesListInvoicesData = {},
  ): CancelablePromise<InvoicesListInvoicesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/invoices/",
      query: {
        skip: data.skip,
        limit: data.limit,
        invoice_status: data.invoiceStatus,
        contact_id: data.contactId,
        project_id: data.projectId,
        job_id: data.jobId,
        overdue_only: data.overdueOnly,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Invoice From Estimate
   * Create a new invoice from an estimate.
   *
   * Creates a new invoice based on an existing estimate.
   * Requires 'edit_projects' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns InvoiceResponseSchema Successful Response
   * @throws ApiError
   */
  public static createInvoiceFromEstimate(
    data: InvoicesCreateInvoiceFromEstimateData,
  ): CancelablePromise<InvoicesCreateInvoiceFromEstimateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/invoices/from-estimate",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Next Invoice Number
   * Get the next available invoice number.
   *
   * Returns the next available invoice number without creating an invoice.
   * This is useful for showing users what number their next invoice will have.
   * Requires 'view_projects' permission.
   * @param data The data for the request.
   * @param data.prefix Prefix for the invoice number
   * @returns NextInvoiceNumberSchema Successful Response
   * @throws ApiError
   */
  public static getNextInvoiceNumber(
    data: InvoicesGetNextInvoiceNumberData = {},
  ): CancelablePromise<InvoicesGetNextInvoiceNumberResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/invoices/next-number",
      query: {
        prefix: data.prefix,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Invoice
   * Get an invoice by ID.
   *
   * Retrieves detailed information about a specific invoice.
   * Requires 'view_projects' permission.
   * @param data The data for the request.
   * @param data.invoiceId Invoice ID
   * @returns InvoiceResponseSchema Successful Response
   * @throws ApiError
   */
  public static getInvoice(
    data: InvoicesGetInvoiceData,
  ): CancelablePromise<InvoicesGetInvoiceResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/invoices/{invoice_id}",
      path: {
        invoice_id: data.invoiceId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Invoice
   * Update an invoice.
   *
   * Updates an existing invoice with the provided information.
   * Only draft invoices can be fully updated.
   * Requires 'edit_projects' permission.
   * @param data The data for the request.
   * @param data.invoiceId Invoice ID
   * @param data.requestBody
   * @returns InvoiceResponseSchema Successful Response
   * @throws ApiError
   */
  public static updateInvoice(
    data: InvoicesUpdateInvoiceData,
  ): CancelablePromise<InvoicesUpdateInvoiceResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/invoices/{invoice_id}",
      path: {
        invoice_id: data.invoiceId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Invoice
   * Delete an invoice.
   *
   * Deletes an invoice. Only draft invoices can be deleted.
   * Requires 'delete_projects' permission.
   * @param data The data for the request.
   * @param data.invoiceId Invoice ID
   * @returns app__api__schemas__activity_schemas__MessageResponse Successful Response
   * @throws ApiError
   */
  public static deleteInvoice(
    data: InvoicesDeleteInvoiceData,
  ): CancelablePromise<InvoicesDeleteInvoiceResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/invoices/{invoice_id}",
      path: {
        invoice_id: data.invoiceId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Process Payment
   * Process a payment for an invoice.
   *
   * Records a payment against an invoice and updates the invoice status.
   * Requires 'edit_projects' permission.
   * @param data The data for the request.
   * @param data.invoiceId Invoice ID
   * @param data.requestBody
   * @returns PaymentResponse Successful Response
   * @throws ApiError
   */
  public static processPayment(
    data: InvoicesProcessPaymentData,
  ): CancelablePromise<InvoicesProcessPaymentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/invoices/{invoice_id}/payments",
      path: {
        invoice_id: data.invoiceId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Search Invoices
   * Search invoices with advanced criteria.
   *
   * Performs advanced search on invoices with multiple filter options.
   * Requires 'view_projects' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.skip Number of records to skip
   * @param data.limit Maximum number of records to return
   * @returns InvoiceListResponseSchema Successful Response
   * @throws ApiError
   */
  public static searchInvoices(
    data: InvoicesSearchInvoicesData,
  ): CancelablePromise<InvoicesSearchInvoicesResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/invoices/search",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class JobsService {
  /**
   * Create a new job
   * Create a new job with the provided details. Job number will be auto-generated if not provided.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns JobResponse Successful Response
   * @throws ApiError
   */
  public static createJobNoSlash(
    data: CreateJobNoSlashData,
  ): CancelablePromise<CreateJobNoSlashResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/jobs",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create a new job
   * Create a new job with the provided details. Job number will be auto-generated if not provided.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns JobResponse Successful Response
   * @throws ApiError
   */
  public static createJobNoSlash1(
    data: CreateJobNoSlash1Data,
  ): CancelablePromise<CreateJobNoSlash1Response> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/jobs",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List jobs
   * Get a paginated list of jobs for the current business.
   * @param data The data for the request.
   * @param data.skip Number of jobs to skip
   * @param data.limit Number of jobs to return
   * @returns JobListPaginatedResponse Successful Response
   * @throws ApiError
   */
  public static listJobsNoSlash(
    data: ListJobsNoSlashData = {},
  ): CancelablePromise<ListJobsNoSlashResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jobs",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List jobs
   * Get a paginated list of jobs for the current business.
   * @param data The data for the request.
   * @param data.skip Number of jobs to skip
   * @param data.limit Number of jobs to return
   * @returns JobListPaginatedResponse Successful Response
   * @throws ApiError
   */
  public static listJobsNoSlash1(
    data: ListJobsNoSlash1Data = {},
  ): CancelablePromise<ListJobsNoSlash1Response> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jobs",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create a new job
   * Create a new job with the provided details. Job number will be auto-generated if not provided.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns JobResponse Successful Response
   * @throws ApiError
   */
  public static createJob(
    data: JobsCreateJobData,
  ): CancelablePromise<JobsCreateJobResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/jobs/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create a new job
   * Create a new job with the provided details. Job number will be auto-generated if not provided.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns JobResponse Successful Response
   * @throws ApiError
   */
  public static createJob1(
    data: JobsCreateJob1Data,
  ): CancelablePromise<JobsCreateJob1Response> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/jobs/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List jobs
   * Get a paginated list of jobs for the current business.
   * @param data The data for the request.
   * @param data.skip Number of jobs to skip
   * @param data.limit Number of jobs to return
   * @returns JobListPaginatedResponse Successful Response
   * @throws ApiError
   */
  public static listJobs(
    data: JobsListJobsData = {},
  ): CancelablePromise<JobsListJobsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jobs/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List jobs
   * Get a paginated list of jobs for the current business.
   * @param data The data for the request.
   * @param data.skip Number of jobs to skip
   * @param data.limit Number of jobs to return
   * @returns JobListPaginatedResponse Successful Response
   * @throws ApiError
   */
  public static listJobs1(
    data: JobsListJobs1Data = {},
  ): CancelablePromise<JobsListJobs1Response> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jobs/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get job by ID
   * Retrieve a specific job by its ID.
   * @param data The data for the request.
   * @param data.jobId
   * @returns JobResponse Successful Response
   * @throws ApiError
   */
  public static getJob(
    data: JobsGetJobData,
  ): CancelablePromise<JobsGetJobResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jobs/{job_id}",
      path: {
        job_id: data.jobId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get job by ID
   * Retrieve a specific job by its ID.
   * @param data The data for the request.
   * @param data.jobId
   * @returns JobResponse Successful Response
   * @throws ApiError
   */
  public static getJob1(
    data: JobsGetJob1Data,
  ): CancelablePromise<JobsGetJob1Response> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jobs/{job_id}",
      path: {
        job_id: data.jobId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update job
   * Update an existing job with the provided details.
   * @param data The data for the request.
   * @param data.jobId
   * @param data.requestBody
   * @returns JobResponse Successful Response
   * @throws ApiError
   */
  public static updateJob(
    data: JobsUpdateJobData,
  ): CancelablePromise<JobsUpdateJobResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/jobs/{job_id}",
      path: {
        job_id: data.jobId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update job
   * Update an existing job with the provided details.
   * @param data The data for the request.
   * @param data.jobId
   * @param data.requestBody
   * @returns JobResponse Successful Response
   * @throws ApiError
   */
  public static updateJob1(
    data: JobsUpdateJob1Data,
  ): CancelablePromise<JobsUpdateJob1Response> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/jobs/{job_id}",
      path: {
        job_id: data.jobId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete job
   * Delete a job. Cannot delete completed or invoiced jobs.
   * @param data The data for the request.
   * @param data.jobId
   * @returns JobActionResponse Successful Response
   * @throws ApiError
   */
  public static deleteJob(
    data: JobsDeleteJobData,
  ): CancelablePromise<JobsDeleteJobResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/jobs/{job_id}",
      path: {
        job_id: data.jobId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete job
   * Delete a job. Cannot delete completed or invoiced jobs.
   * @param data The data for the request.
   * @param data.jobId
   * @returns JobActionResponse Successful Response
   * @throws ApiError
   */
  public static deleteJob1(
    data: JobsDeleteJob1Data,
  ): CancelablePromise<JobsDeleteJob1Response> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/jobs/{job_id}",
      path: {
        job_id: data.jobId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Search jobs
   * Search jobs with various filters and criteria.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns JobListPaginatedResponse Successful Response
   * @throws ApiError
   */
  public static searchJobs(
    data: JobsSearchJobsData,
  ): CancelablePromise<JobsSearchJobsResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/jobs/search",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Search jobs
   * Search jobs with various filters and criteria.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns JobListPaginatedResponse Successful Response
   * @throws ApiError
   */
  public static searchJobs1(
    data: JobsSearchJobs1Data,
  ): CancelablePromise<JobsSearchJobs1Response> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/jobs/search",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update job status
   * Update the status of a job with optional notes.
   * @param data The data for the request.
   * @param data.jobId
   * @param data.requestBody
   * @returns JobResponse Successful Response
   * @throws ApiError
   */
  public static updateJobStatus(
    data: JobsUpdateJobStatusData,
  ): CancelablePromise<JobsUpdateJobStatusResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/jobs/{job_id}/status",
      path: {
        job_id: data.jobId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update job status
   * Update the status of a job with optional notes.
   * @param data The data for the request.
   * @param data.jobId
   * @param data.requestBody
   * @returns JobResponse Successful Response
   * @throws ApiError
   */
  public static updateJobStatus1(
    data: JobsUpdateJobStatus1Data,
  ): CancelablePromise<JobsUpdateJobStatus1Response> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/jobs/{job_id}/status",
      path: {
        job_id: data.jobId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Assign job to users
   * Assign a job to one or more users.
   * @param data The data for the request.
   * @param data.jobId
   * @param data.requestBody
   * @returns JobResponse Successful Response
   * @throws ApiError
   */
  public static assignJob(
    data: JobsAssignJobData,
  ): CancelablePromise<JobsAssignJobResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/jobs/{job_id}/assign",
      path: {
        job_id: data.jobId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Assign job to users
   * Assign a job to one or more users.
   * @param data The data for the request.
   * @param data.jobId
   * @param data.requestBody
   * @returns JobResponse Successful Response
   * @throws ApiError
   */
  public static assignJob1(
    data: JobsAssignJob1Data,
  ): CancelablePromise<JobsAssignJob1Response> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/jobs/{job_id}/assign",
      path: {
        job_id: data.jobId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Bulk update jobs
   * Update multiple jobs at once with the same changes.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns JobBulkActionResponse Successful Response
   * @throws ApiError
   */
  public static bulkUpdateJobs(
    data: JobsBulkUpdateJobsData,
  ): CancelablePromise<JobsBulkUpdateJobsResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/jobs/bulk-update",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Bulk update jobs
   * Update multiple jobs at once with the same changes.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns JobBulkActionResponse Successful Response
   * @throws ApiError
   */
  public static bulkUpdateJobs1(
    data: JobsBulkUpdateJobs1Data,
  ): CancelablePromise<JobsBulkUpdateJobs1Response> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/jobs/bulk-update",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get job statistics
   * Get comprehensive job statistics for the current business.
   * @returns JobStatisticsResponse Successful Response
   * @throws ApiError
   */
  public static getJobStatistics(): CancelablePromise<JobsGetJobStatisticsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jobs/statistics",
    })
  }

  /**
   * Get job statistics
   * Get comprehensive job statistics for the current business.
   * @returns JobStatisticsResponse Successful Response
   * @throws ApiError
   */
  public static getJobStatistics1(): CancelablePromise<JobsGetJobStatistics1Response> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jobs/statistics",
    })
  }

  /**
   * Get user workload
   * Get workload statistics for a specific user.
   * @param data The data for the request.
   * @param data.targetUserId
   * @returns JobWorkloadResponse Successful Response
   * @throws ApiError
   */
  public static getUserWorkload(
    data: JobsGetUserWorkloadData,
  ): CancelablePromise<JobsGetUserWorkloadResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jobs/workload/{user_id}",
      query: {
        target_user_id: data.targetUserId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get user workload
   * Get workload statistics for a specific user.
   * @param data The data for the request.
   * @param data.targetUserId
   * @returns JobWorkloadResponse Successful Response
   * @throws ApiError
   */
  public static getUserWorkload1(
    data: JobsGetUserWorkload1Data,
  ): CancelablePromise<JobsGetUserWorkload1Response> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jobs/workload/{user_id}",
      query: {
        target_user_id: data.targetUserId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get daily schedule
   * Get jobs scheduled for a specific day.
   * @param data The data for the request.
   * @param data.date Date to get schedule for
   * @param data.userId Filter by specific user
   * @returns JobScheduleResponse Successful Response
   * @throws ApiError
   */
  public static getDailySchedule(
    data: JobsGetDailyScheduleData,
  ): CancelablePromise<JobsGetDailyScheduleResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jobs/schedule/daily",
      query: {
        date: data.date,
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get daily schedule
   * Get jobs scheduled for a specific day.
   * @param data The data for the request.
   * @param data.date Date to get schedule for
   * @param data.userId Filter by specific user
   * @returns JobScheduleResponse Successful Response
   * @throws ApiError
   */
  public static getDailySchedule1(
    data: JobsGetDailySchedule1Data,
  ): CancelablePromise<JobsGetDailySchedule1Response> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jobs/schedule/daily",
      query: {
        date: data.date,
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Start job
   * Start a job (convenience endpoint for status update to in_progress).
   * @param data The data for the request.
   * @param data.jobId
   * @returns JobResponse Successful Response
   * @throws ApiError
   */
  public static startJob(
    data: JobsStartJobData,
  ): CancelablePromise<JobsStartJobResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/jobs/{job_id}/start",
      path: {
        job_id: data.jobId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Start job
   * Start a job (convenience endpoint for status update to in_progress).
   * @param data The data for the request.
   * @param data.jobId
   * @returns JobResponse Successful Response
   * @throws ApiError
   */
  public static startJob1(
    data: JobsStartJob1Data,
  ): CancelablePromise<JobsStartJob1Response> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/jobs/{job_id}/start",
      path: {
        job_id: data.jobId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Complete job
   * Complete a job with optional completion notes.
   * @param data The data for the request.
   * @param data.jobId
   * @param data.completionNotes Notes about job completion
   * @returns JobResponse Successful Response
   * @throws ApiError
   */
  public static completeJob(
    data: JobsCompleteJobData,
  ): CancelablePromise<JobsCompleteJobResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/jobs/{job_id}/complete",
      path: {
        job_id: data.jobId,
      },
      query: {
        completion_notes: data.completionNotes,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Complete job
   * Complete a job with optional completion notes.
   * @param data The data for the request.
   * @param data.jobId
   * @param data.completionNotes Notes about job completion
   * @returns JobResponse Successful Response
   * @throws ApiError
   */
  public static completeJob1(
    data: JobsCompleteJob1Data,
  ): CancelablePromise<JobsCompleteJob1Response> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/jobs/{job_id}/complete",
      path: {
        job_id: data.jobId,
      },
      query: {
        completion_notes: data.completionNotes,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Cancel job
   * Cancel a job with a reason.
   * @param data The data for the request.
   * @param data.jobId
   * @param data.reason Reason for cancellation
   * @returns JobResponse Successful Response
   * @throws ApiError
   */
  public static cancelJob(
    data: JobsCancelJobData,
  ): CancelablePromise<JobsCancelJobResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/jobs/{job_id}/cancel",
      path: {
        job_id: data.jobId,
      },
      query: {
        reason: data.reason,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Cancel job
   * Cancel a job with a reason.
   * @param data The data for the request.
   * @param data.jobId
   * @param data.reason Reason for cancellation
   * @returns JobResponse Successful Response
   * @throws ApiError
   */
  public static cancelJob1(
    data: JobsCancelJob1Data,
  ): CancelablePromise<JobsCancelJob1Response> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/jobs/{job_id}/cancel",
      path: {
        job_id: data.jobId,
      },
      query: {
        reason: data.reason,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class MiddlewareHealthService {
  /**
   * Get Middleware Health
   * Get middleware health and configuration information.
   *
   * This endpoint provides information about the current middleware stack,
   * configuration, and request processing status.
   * @returns MiddlewareHealthResponse Successful Response
   * @throws ApiError
   */
  public static getMiddlewareHealth(): CancelablePromise<MiddlewareHealthGetMiddlewareHealthResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/middleware/health",
    })
  }

  /**
   * Test Middleware Stack
   * Test the middleware stack functionality.
   *
   * This endpoint tests authentication and business context middleware
   * to ensure they are working correctly.
   * @returns MiddlewareTestResponse Successful Response
   * @throws ApiError
   */
  public static testMiddlewareStack(): CancelablePromise<MiddlewareHealthTestMiddlewareStackResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/middleware/test",
    })
  }

  /**
   * Get Middleware Config
   * Get detailed middleware configuration.
   *
   * This endpoint provides detailed configuration information
   * for debugging and monitoring purposes.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getMiddlewareConfig(): CancelablePromise<MiddlewareHealthGetMiddlewareConfigResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/middleware/config",
    })
  }

  /**
   * Test Authentication Required
   * Test endpoint that requires authentication.
   *
   * This endpoint will return 401 if authentication middleware is not working.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static testAuthenticationRequired(): CancelablePromise<MiddlewareHealthTestAuthenticationRequiredResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/middleware/test-auth",
    })
  }

  /**
   * Test Business Context Required
   * Test endpoint that requires business context.
   *
   * This endpoint will return 400 if business context middleware is not working.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static testBusinessContextRequired(): CancelablePromise<MiddlewareHealthTestBusinessContextRequiredResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/middleware/test-business-context",
    })
  }
}

export class MobileVoiceIntegrationService {
  /**
   * Start Voice Session
   * Start a new voice session with LiveKit agents and preloaded business context.
   *
   * This endpoint:
   * 1. Preloads business context for the user and business
   * 2. Creates a new LiveKit room with enriched metadata
   * 3. Generates access tokens for mobile app
   * 4. Ensures context is available when the agent starts
   * @param data The data for the request.
   * @param data.requestBody
   * @returns VoiceSessionResponse Successful Response
   * @throws ApiError
   */
  public static startVoiceSession(
    data: MobileVoiceIntegrationStartVoiceSessionData,
  ): CancelablePromise<MobileVoiceIntegrationStartVoiceSessionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/mobile/voice/session/start",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Session Status
   * Get the current status of a voice session.
   * @param data The data for the request.
   * @param data.sessionId
   * @returns VoiceSessionStatusResponse Successful Response
   * @throws ApiError
   */
  public static getSessionStatus(
    data: MobileVoiceIntegrationGetSessionStatusData,
  ): CancelablePromise<MobileVoiceIntegrationGetSessionStatusResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/mobile/voice/session/{session_id}/status",
      path: {
        session_id: data.sessionId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Session State
   * Update session state from mobile app.
   * @param data The data for the request.
   * @param data.sessionId
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static updateSessionState(
    data: MobileVoiceIntegrationUpdateSessionStateData,
  ): CancelablePromise<MobileVoiceIntegrationUpdateSessionStateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/mobile/voice/session/{session_id}/update-state",
      path: {
        session_id: data.sessionId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * End Voice Session
   * End a voice session and cleanup resources.
   * @param data The data for the request.
   * @param data.sessionId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static endVoiceSession(
    data: MobileVoiceIntegrationEndVoiceSessionData,
  ): CancelablePromise<MobileVoiceIntegrationEndVoiceSessionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/mobile/voice/session/{session_id}/end",
      path: {
        session_id: data.sessionId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Voice System Health
   * Get voice system health status for mobile monitoring.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static voiceSystemHealth(): CancelablePromise<MobileVoiceIntegrationVoiceSystemHealthResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/mobile/voice/health",
    })
  }

  /**
   * Get Agent Capabilities
   * Get available agent capabilities for mobile UI.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getAgentCapabilities(): CancelablePromise<MobileVoiceIntegrationGetAgentCapabilitiesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/mobile/voice/agent-capabilities",
    })
  }
}

export class ProductsService {
  /**
   * Create Product
   * Create a new product.
   *
   * Creates a new product in the inventory system with the provided information.
   * Requires 'edit_projects' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ProductResponseSchema Successful Response
   * @throws ApiError
   */
  public static createProductNoSlash(
    data: CreateProductNoSlashData,
  ): CancelablePromise<CreateProductNoSlashResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/products",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List Products
   * List products.
   *
   * Retrieves a paginated list of products with optional filtering.
   * Requires 'view_projects' permission.
   * @param data The data for the request.
   * @param data.skip Number of records to skip
   * @param data.limit Maximum number of records to return
   * @param data.status Filter by product status
   * @param data.categoryId Filter by category ID
   * @param data.supplierId Filter by supplier ID
   * @param data.lowStockOnly Show only low stock items
   * @returns ProductListResponseSchema Successful Response
   * @throws ApiError
   */
  public static listProductsNoSlash(
    data: ListProductsNoSlashData = {},
  ): CancelablePromise<ListProductsNoSlashResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/products",
      query: {
        skip: data.skip,
        limit: data.limit,
        status: data.status,
        category_id: data.categoryId,
        supplier_id: data.supplierId,
        low_stock_only: data.lowStockOnly,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Product
   * Create a new product.
   *
   * Creates a new product in the inventory system with the provided information.
   * Requires 'edit_projects' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ProductResponseSchema Successful Response
   * @throws ApiError
   */
  public static createProduct(
    data: ProductsCreateProductData,
  ): CancelablePromise<ProductsCreateProductResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/products/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List Products
   * List products.
   *
   * Retrieves a paginated list of products with optional filtering.
   * Requires 'view_projects' permission.
   * @param data The data for the request.
   * @param data.skip Number of records to skip
   * @param data.limit Maximum number of records to return
   * @param data.status Filter by product status
   * @param data.categoryId Filter by category ID
   * @param data.supplierId Filter by supplier ID
   * @param data.lowStockOnly Show only low stock items
   * @returns ProductListResponseSchema Successful Response
   * @throws ApiError
   */
  public static listProducts(
    data: ProductsListProductsData = {},
  ): CancelablePromise<ProductsListProductsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/products/",
      query: {
        skip: data.skip,
        limit: data.limit,
        status: data.status,
        category_id: data.categoryId,
        supplier_id: data.supplierId,
        low_stock_only: data.lowStockOnly,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Product
   * Get a product by ID.
   *
   * Retrieves detailed information about a specific product.
   * Requires 'view_projects' permission.
   * @param data The data for the request.
   * @param data.productId Product ID
   * @returns ProductResponseSchema Successful Response
   * @throws ApiError
   */
  public static getProduct(
    data: ProductsGetProductData,
  ): CancelablePromise<ProductsGetProductResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/products/{product_id}",
      path: {
        product_id: data.productId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Product
   * Update a product.
   *
   * Updates an existing product with the provided information.
   * Requires 'edit_projects' permission.
   * @param data The data for the request.
   * @param data.productId Product ID
   * @param data.requestBody
   * @returns ProductResponseSchema Successful Response
   * @throws ApiError
   */
  public static updateProduct(
    data: ProductsUpdateProductData,
  ): CancelablePromise<ProductsUpdateProductResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/products/{product_id}",
      path: {
        product_id: data.productId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Product
   * Delete a product.
   *
   * Soft deletes a product from the inventory system.
   * Requires 'delete_projects' permission.
   * @param data The data for the request.
   * @param data.productId Product ID
   * @returns app__api__schemas__activity_schemas__MessageResponse Successful Response
   * @throws ApiError
   */
  public static deleteProduct(
    data: ProductsDeleteProductData,
  ): CancelablePromise<ProductsDeleteProductResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/products/{product_id}",
      path: {
        product_id: data.productId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Search Products
   * Search products.
   *
   * Advanced search for products with comprehensive filtering options.
   * Requires 'view_projects' permission.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ProductListResponseSchema Successful Response
   * @throws ApiError
   */
  public static searchProducts(
    data: ProductsSearchProductsData,
  ): CancelablePromise<ProductsSearchProductsResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/products/search",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Adjust Stock
   * Adjust product stock.
   *
   * Performs a stock adjustment (increase or decrease) for a product.
   * Requires 'edit_projects' permission.
   * @param data The data for the request.
   * @param data.productId Product ID
   * @param data.requestBody
   * @returns StockActionResponse Successful Response
   * @throws ApiError
   */
  public static adjustStock(
    data: ProductsAdjustStockData,
  ): CancelablePromise<ProductsAdjustStockResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/products/{product_id}/adjust-stock",
      path: {
        product_id: data.productId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reserve Stock
   * Reserve product stock.
   *
   * Reserves stock for orders, estimates, or other references.
   * Requires 'edit_projects' permission.
   * @param data The data for the request.
   * @param data.productId Product ID
   * @param data.requestBody
   * @returns StockActionResponse Successful Response
   * @throws ApiError
   */
  public static reserveStock(
    data: ProductsReserveStockData,
  ): CancelablePromise<ProductsReserveStockResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/products/{product_id}/reserve",
      path: {
        product_id: data.productId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Reorder Suggestions
   * Get reorder suggestions.
   *
   * Returns automated reorder suggestions for products that need restocking.
   * Requires 'view_projects' permission.
   * @param data The data for the request.
   * @param data.categoryId Filter by category
   * @param data.supplierId Filter by supplier
   * @returns ReorderSuggestionsResponseSchema Successful Response
   * @throws ApiError
   */
  public static getReorderSuggestions(
    data: ProductsGetReorderSuggestionsData = {},
  ): CancelablePromise<ProductsGetReorderSuggestionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/products/reorder/suggestions",
      query: {
        category_id: data.categoryId,
        supplier_id: data.supplierId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class ProjectsService {
  /**
   * Create a new project
   * Create a new project with the provided details. Project number will be auto-generated if not provided.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ProjectResponse Successful Response
   * @throws ApiError
   */
  public static createProject(
    data: ProjectsCreateProjectData,
  ): CancelablePromise<ProjectsCreateProjectResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/projects",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create a new project
   * Create a new project with the provided details. Project number will be auto-generated if not provided.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ProjectResponse Successful Response
   * @throws ApiError
   */
  public static createProject1(
    data: ProjectsCreateProject1Data,
  ): CancelablePromise<ProjectsCreateProject1Response> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/projects",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List projects
   * Get a paginated list of projects for the business.
   * @param data The data for the request.
   * @param data.skip Number of projects to skip
   * @param data.limit Maximum number of projects to return
   * @returns ProjectListPaginatedResponse Successful Response
   * @throws ApiError
   */
  public static listProjects(
    data: ProjectsListProjectsData = {},
  ): CancelablePromise<ProjectsListProjectsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/projects",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List projects
   * Get a paginated list of projects for the business.
   * @param data The data for the request.
   * @param data.skip Number of projects to skip
   * @param data.limit Maximum number of projects to return
   * @returns ProjectListPaginatedResponse Successful Response
   * @throws ApiError
   */
  public static listProjects1(
    data: ProjectsListProjects1Data = {},
  ): CancelablePromise<ProjectsListProjects1Response> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/projects",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get project by ID
   * Retrieve a specific project by its ID.
   * @param data The data for the request.
   * @param data.projectId
   * @returns ProjectResponse Successful Response
   * @throws ApiError
   */
  public static getProject(
    data: ProjectsGetProjectData,
  ): CancelablePromise<ProjectsGetProjectResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/projects/{project_id}",
      path: {
        project_id: data.projectId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get project by ID
   * Retrieve a specific project by its ID.
   * @param data The data for the request.
   * @param data.projectId
   * @returns ProjectResponse Successful Response
   * @throws ApiError
   */
  public static getProject1(
    data: ProjectsGetProject1Data,
  ): CancelablePromise<ProjectsGetProject1Response> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/projects/{project_id}",
      path: {
        project_id: data.projectId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update project
   * Update an existing project with the provided details.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.requestBody
   * @returns ProjectResponse Successful Response
   * @throws ApiError
   */
  public static updateProject(
    data: ProjectsUpdateProjectData,
  ): CancelablePromise<ProjectsUpdateProjectResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/projects/{project_id}",
      path: {
        project_id: data.projectId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update project
   * Update an existing project with the provided details.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.requestBody
   * @returns ProjectResponse Successful Response
   * @throws ApiError
   */
  public static updateProject1(
    data: ProjectsUpdateProject1Data,
  ): CancelablePromise<ProjectsUpdateProject1Response> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/projects/{project_id}",
      path: {
        project_id: data.projectId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete project
   * Delete a project by its ID.
   * @param data The data for the request.
   * @param data.projectId
   * @returns ProjectActionResponse Successful Response
   * @throws ApiError
   */
  public static deleteProject(
    data: ProjectsDeleteProjectData,
  ): CancelablePromise<ProjectsDeleteProjectResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/projects/{project_id}",
      path: {
        project_id: data.projectId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete project
   * Delete a project by its ID.
   * @param data The data for the request.
   * @param data.projectId
   * @returns ProjectActionResponse Successful Response
   * @throws ApiError
   */
  public static deleteProject1(
    data: ProjectsDeleteProject1Data,
  ): CancelablePromise<ProjectsDeleteProject1Response> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/projects/{project_id}",
      path: {
        project_id: data.projectId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Search projects
   * Search projects with various criteria and filters.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.skip Number of projects to skip
   * @param data.limit Maximum number of projects to return
   * @returns ProjectListPaginatedResponse Successful Response
   * @throws ApiError
   */
  public static searchProjects(
    data: ProjectsSearchProjectsData,
  ): CancelablePromise<ProjectsSearchProjectsResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/projects/search",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Search projects
   * Search projects with various criteria and filters.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.skip Number of projects to skip
   * @param data.limit Maximum number of projects to return
   * @returns ProjectListPaginatedResponse Successful Response
   * @throws ApiError
   */
  public static searchProjects1(
    data: ProjectsSearchProjects1Data,
  ): CancelablePromise<ProjectsSearchProjects1Response> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/projects/search",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get projects by status
   * Get all projects with a specific status.
   * @param data The data for the request.
   * @param data.status
   * @param data.skip
   * @param data.limit
   * @returns ProjectListResponse Successful Response
   * @throws ApiError
   */
  public static getProjectsByStatus(
    data: ProjectsGetProjectsByStatusData,
  ): CancelablePromise<ProjectsGetProjectsByStatusResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/projects/status/{status}",
      path: {
        status: data.status,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get projects by status
   * Get all projects with a specific status.
   * @param data The data for the request.
   * @param data.status
   * @param data.skip
   * @param data.limit
   * @returns ProjectListResponse Successful Response
   * @throws ApiError
   */
  public static getProjectsByStatus1(
    data: ProjectsGetProjectsByStatus1Data,
  ): CancelablePromise<ProjectsGetProjectsByStatus1Response> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/projects/status/{status}",
      path: {
        status: data.status,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get project statistics
   * Get comprehensive project statistics for the business.
   * @returns ProjectStatisticsResponse Successful Response
   * @throws ApiError
   */
  public static getProjectStatistics(): CancelablePromise<ProjectsGetProjectStatisticsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/projects/analytics/statistics",
    })
  }

  /**
   * Get project statistics
   * Get comprehensive project statistics for the business.
   * @returns ProjectStatisticsResponse Successful Response
   * @throws ApiError
   */
  public static getProjectStatistics1(): CancelablePromise<ProjectsGetProjectStatistics1Response> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/projects/analytics/statistics",
    })
  }

  /**
   * Get budget summary
   * Get budget summary for projects within a date range.
   * @param data The data for the request.
   * @param data.startDate Start date for budget summary
   * @param data.endDate End date for budget summary
   * @returns ProjectBudgetSummaryResponse Successful Response
   * @throws ApiError
   */
  public static getBudgetSummary(
    data: ProjectsGetBudgetSummaryData,
  ): CancelablePromise<ProjectsGetBudgetSummaryResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/projects/analytics/budget-summary",
      query: {
        start_date: data.startDate,
        end_date: data.endDate,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get budget summary
   * Get budget summary for projects within a date range.
   * @param data The data for the request.
   * @param data.startDate Start date for budget summary
   * @param data.endDate End date for budget summary
   * @returns ProjectBudgetSummaryResponse Successful Response
   * @throws ApiError
   */
  public static getBudgetSummary1(
    data: ProjectsGetBudgetSummary1Data,
  ): CancelablePromise<ProjectsGetBudgetSummary1Response> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/projects/analytics/budget-summary",
      query: {
        start_date: data.startDate,
        end_date: data.endDate,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Assign team members to project
   * Assign team members to a project.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.requestBody
   * @returns ProjectResponse Successful Response
   * @throws ApiError
   */
  public static assignTeamMembers(
    data: ProjectsAssignTeamMembersData,
  ): CancelablePromise<ProjectsAssignTeamMembersResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/projects/{project_id}/assign",
      path: {
        project_id: data.projectId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Assign team members to project
   * Assign team members to a project.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.requestBody
   * @returns ProjectResponse Successful Response
   * @throws ApiError
   */
  public static assignTeamMembers1(
    data: ProjectsAssignTeamMembers1Data,
  ): CancelablePromise<ProjectsAssignTeamMembers1Response> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/projects/{project_id}/assign",
      path: {
        project_id: data.projectId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create project template
   * Create a new project template.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ProjectTemplateResponse Successful Response
   * @throws ApiError
   */
  public static createProjectTemplate(
    data: ProjectsCreateProjectTemplateData,
  ): CancelablePromise<ProjectsCreateProjectTemplateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/projects/templates",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create project template
   * Create a new project template.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ProjectTemplateResponse Successful Response
   * @throws ApiError
   */
  public static createProjectTemplate1(
    data: ProjectsCreateProjectTemplate1Data,
  ): CancelablePromise<ProjectsCreateProjectTemplate1Response> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/projects/templates",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create project from template
   * Create a new project using a template.
   * @param data The data for the request.
   * @param data.templateId
   * @param data.requestBody
   * @returns ProjectResponse Successful Response
   * @throws ApiError
   */
  public static createProjectFromTemplate(
    data: ProjectsCreateProjectFromTemplateData,
  ): CancelablePromise<ProjectsCreateProjectFromTemplateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/projects/templates/{template_id}/create-project",
      path: {
        template_id: data.templateId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create project from template
   * Create a new project using a template.
   * @param data The data for the request.
   * @param data.templateId
   * @param data.requestBody
   * @returns ProjectResponse Successful Response
   * @throws ApiError
   */
  public static createProjectFromTemplate1(
    data: ProjectsCreateProjectFromTemplate1Data,
  ): CancelablePromise<ProjectsCreateProjectFromTemplate1Response> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/projects/templates/{template_id}/create-project",
      path: {
        template_id: data.templateId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Assign jobs to project
   * Assign multiple jobs to a project.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.requestBody
   * @returns ProjectJobAssignmentResponse Successful Response
   * @throws ApiError
   */
  public static assignJobsToProject(
    data: ProjectsAssignJobsToProjectData,
  ): CancelablePromise<ProjectsAssignJobsToProjectResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/projects/{project_id}/jobs",
      path: {
        project_id: data.projectId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Assign jobs to project
   * Assign multiple jobs to a project.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.requestBody
   * @returns ProjectJobAssignmentResponse Successful Response
   * @throws ApiError
   */
  public static assignJobsToProject1(
    data: ProjectsAssignJobsToProject1Data,
  ): CancelablePromise<ProjectsAssignJobsToProject1Response> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/projects/{project_id}/jobs",
      path: {
        project_id: data.projectId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get project jobs
   * Get all jobs associated with a project.
   * @param data The data for the request.
   * @param data.projectId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getProjectJobs(
    data: ProjectsGetProjectJobsData,
  ): CancelablePromise<ProjectsGetProjectJobsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/projects/{project_id}/jobs",
      path: {
        project_id: data.projectId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get project jobs
   * Get all jobs associated with a project.
   * @param data The data for the request.
   * @param data.projectId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getProjectJobs1(
    data: ProjectsGetProjectJobs1Data,
  ): CancelablePromise<ProjectsGetProjectJobs1Response> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/projects/{project_id}/jobs",
      path: {
        project_id: data.projectId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Remove job from project
   * Remove a job from a project (sets project_id to NULL).
   * @param data The data for the request.
   * @param data.projectId
   * @param data.jobId
   * @returns ProjectActionResponse Successful Response
   * @throws ApiError
   */
  public static removeJobFromProject(
    data: ProjectsRemoveJobFromProjectData,
  ): CancelablePromise<ProjectsRemoveJobFromProjectResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/projects/{project_id}/jobs/{job_id}",
      path: {
        project_id: data.projectId,
        job_id: data.jobId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Remove job from project
   * Remove a job from a project (sets project_id to NULL).
   * @param data The data for the request.
   * @param data.projectId
   * @param data.jobId
   * @returns ProjectActionResponse Successful Response
   * @throws ApiError
   */
  public static removeJobFromProject1(
    data: ProjectsRemoveJobFromProject1Data,
  ): CancelablePromise<ProjectsRemoveJobFromProject1Response> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/projects/{project_id}/jobs/{job_id}",
      path: {
        project_id: data.projectId,
        job_id: data.jobId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PurchaseOrdersService {
  /**
   * Create Purchase Order
   * Create a new purchase order with line items
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static createPurchaseOrder(
    data: PurchaseOrdersCreatePurchaseOrderData,
  ): CancelablePromise<PurchaseOrdersCreatePurchaseOrderResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/purchase-orders/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List Purchase Orders
   * Get paginated list of purchase orders with optional filtering
   * @param data The data for the request.
   * @param data.page Page number
   * @param data.pageSize Page size
   * @param data.status Filter by status
   * @param data.supplierId Filter by supplier
   * @param data.startDate Start date (YYYY-MM-DD)
   * @param data.endDate End date (YYYY-MM-DD)
   * @returns PurchaseOrderListResponseSchema Successful Response
   * @throws ApiError
   */
  public static listPurchaseOrders(
    data: PurchaseOrdersListPurchaseOrdersData = {},
  ): CancelablePromise<PurchaseOrdersListPurchaseOrdersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/purchase-orders/",
      query: {
        page: data.page,
        page_size: data.pageSize,
        status: data.status,
        supplier_id: data.supplierId,
        start_date: data.startDate,
        end_date: data.endDate,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Purchase Order
   * Get purchase order details by ID
   * @param data The data for the request.
   * @param data.purchaseOrderId
   * @returns PurchaseOrderResponseSchema Successful Response
   * @throws ApiError
   */
  public static getPurchaseOrder(
    data: PurchaseOrdersGetPurchaseOrderData,
  ): CancelablePromise<PurchaseOrdersGetPurchaseOrderResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/purchase-orders/{purchase_order_id}",
      path: {
        purchase_order_id: data.purchaseOrderId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Approve Purchase Order
   * Approve a purchase order to allow it to be sent
   * @param data The data for the request.
   * @param data.purchaseOrderId
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static approvePurchaseOrder(
    data: PurchaseOrdersApprovePurchaseOrderData,
  ): CancelablePromise<PurchaseOrdersApprovePurchaseOrderResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/purchase-orders/{purchase_order_id}/approve",
      path: {
        purchase_order_id: data.purchaseOrderId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Send Purchase Order
   * Send approved purchase order to supplier
   * @param data The data for the request.
   * @param data.purchaseOrderId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static sendPurchaseOrder(
    data: PurchaseOrdersSendPurchaseOrderData,
  ): CancelablePromise<PurchaseOrdersSendPurchaseOrderResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/purchase-orders/{purchase_order_id}/send",
      path: {
        purchase_order_id: data.purchaseOrderId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Receive Purchase Order Items
   * Record receipt of purchase order items and update inventory
   * @param data The data for the request.
   * @param data.purchaseOrderId
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static receivePurchaseOrder(
    data: PurchaseOrdersReceivePurchaseOrderData,
  ): CancelablePromise<PurchaseOrdersReceivePurchaseOrderResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/purchase-orders/{purchase_order_id}/receive",
      path: {
        purchase_order_id: data.purchaseOrderId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Search Purchase Orders
   * Advanced search for purchase orders with multiple criteria
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.page Page number
   * @param data.pageSize Page size
   * @returns PurchaseOrderListResponseSchema Successful Response
   * @throws ApiError
   */
  public static searchPurchaseOrders(
    data: PurchaseOrdersSearchPurchaseOrdersData,
  ): CancelablePromise<PurchaseOrdersSearchPurchaseOrdersResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/purchase-orders/search",
      query: {
        page: data.page,
        page_size: data.pageSize,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Purchase Orders Pending Approval
   * Get purchase orders that require approval
   * @param data The data for the request.
   * @param data.page Page number
   * @param data.pageSize Page size
   * @returns PurchaseOrderListResponseSchema Successful Response
   * @throws ApiError
   */
  public static getPendingApprovalOrders(
    data: PurchaseOrdersGetPendingApprovalOrdersData = {},
  ): CancelablePromise<PurchaseOrdersGetPendingApprovalOrdersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/purchase-orders/pending/approval",
      query: {
        page: data.page,
        page_size: data.pageSize,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Purchase Orders Pending Receipt
   * Get purchase orders that are pending receipt of items
   * @param data The data for the request.
   * @param data.page Page number
   * @param data.pageSize Page size
   * @param data.overdueOnly Show only overdue orders
   * @returns PurchaseOrderListResponseSchema Successful Response
   * @throws ApiError
   */
  public static getPendingReceiptOrders(
    data: PurchaseOrdersGetPendingReceiptOrdersData = {},
  ): CancelablePromise<PurchaseOrdersGetPendingReceiptOrdersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/purchase-orders/pending/receipt",
      query: {
        page: data.page,
        page_size: data.pageSize,
        overdue_only: data.overdueOnly,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class SuppliersService {
  /**
   * Create Supplier
   * Create a new supplier with comprehensive information
   * @param data The data for the request.
   * @param data.requestBody
   * @returns SupplierResponseSchema Successful Response
   * @throws ApiError
   */
  public static createSupplier(
    data: SuppliersCreateSupplierData,
  ): CancelablePromise<SuppliersCreateSupplierResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/suppliers/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List Suppliers
   * Get paginated list of suppliers with optional filtering
   * @param data The data for the request.
   * @param data.page Page number
   * @param data.pageSize Page size
   * @param data.status Filter by status
   * @param data.category Filter by category
   * @param data.isPreferred Filter by preferred status
   * @param data.search Search by name or code
   * @returns SupplierListResponseSchema Successful Response
   * @throws ApiError
   */
  public static listSuppliers(
    data: SuppliersListSuppliersData = {},
  ): CancelablePromise<SuppliersListSuppliersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/suppliers/",
      query: {
        page: data.page,
        page_size: data.pageSize,
        status: data.status,
        category: data.category,
        is_preferred: data.isPreferred,
        search: data.search,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Supplier
   * Get supplier details by ID
   * @param data The data for the request.
   * @param data.supplierId
   * @returns SupplierResponseSchema Successful Response
   * @throws ApiError
   */
  public static getSupplier(
    data: SuppliersGetSupplierData,
  ): CancelablePromise<SuppliersGetSupplierResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/suppliers/{supplier_id}",
      path: {
        supplier_id: data.supplierId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Supplier
   * Update supplier information
   * @param data The data for the request.
   * @param data.supplierId
   * @param data.requestBody
   * @returns SupplierResponseSchema Successful Response
   * @throws ApiError
   */
  public static updateSupplier(
    data: SuppliersUpdateSupplierData,
  ): CancelablePromise<SuppliersUpdateSupplierResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/suppliers/{supplier_id}",
      path: {
        supplier_id: data.supplierId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Supplier
   * Delete supplier (soft delete)
   * @param data The data for the request.
   * @param data.supplierId
   * @returns void Successful Response
   * @throws ApiError
   */
  public static deleteSupplier(
    data: SuppliersDeleteSupplierData,
  ): CancelablePromise<SuppliersDeleteSupplierResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/suppliers/{supplier_id}",
      path: {
        supplier_id: data.supplierId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Advanced Supplier Search
   * Advanced search for suppliers with multiple criteria
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.page Page number
   * @param data.pageSize Page size
   * @returns SupplierListResponseSchema Successful Response
   * @throws ApiError
   */
  public static searchSuppliers(
    data: SuppliersSearchSuppliersData,
  ): CancelablePromise<SuppliersSearchSuppliersResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/suppliers/search",
      query: {
        page: data.page,
        page_size: data.pageSize,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Supplier Performance
   * Get comprehensive performance metrics for a supplier
   * @param data The data for the request.
   * @param data.supplierId
   * @param data.startDate Start date (YYYY-MM-DD)
   * @param data.endDate End date (YYYY-MM-DD)
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getSupplierPerformance(
    data: SuppliersGetSupplierPerformanceData,
  ): CancelablePromise<SuppliersGetSupplierPerformanceResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/suppliers/{supplier_id}/performance",
      path: {
        supplier_id: data.supplierId,
      },
      query: {
        start_date: data.startDate,
        end_date: data.endDate,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Supplier Order History
   * Get purchase order history for a supplier
   * @param data The data for the request.
   * @param data.supplierId
   * @param data.page Page number
   * @param data.pageSize Page size
   * @param data.startDate Start date (YYYY-MM-DD)
   * @param data.endDate End date (YYYY-MM-DD)
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getSupplierOrders(
    data: SuppliersGetSupplierOrdersData,
  ): CancelablePromise<SuppliersGetSupplierOrdersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/suppliers/{supplier_id}/orders",
      path: {
        supplier_id: data.supplierId,
      },
      query: {
        page: data.page,
        page_size: data.pageSize,
        start_date: data.startDate,
        end_date: data.endDate,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class TemplatesService {
  /**
   * Get Templates
   * Get all templates for the business.
   *
   * Returns both business-specific and system templates.
   * Can be filtered by template type, category, and status.
   * @param data The data for the request.
   * @param data.templateType Filter by template type
   * @param data.category Filter by category
   * @param data.isActive Filter by active status
   * @param data.isSystem Show only system templates
   * @returns TemplateResponse Successful Response
   * @throws ApiError
   */
  public static getTemplates(
    data: TemplatesGetTemplatesData = {},
  ): CancelablePromise<TemplatesGetTemplatesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/templates",
      query: {
        template_type: data.templateType,
        category: data.category,
        is_active: data.isActive,
        is_system: data.isSystem,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Template
   * Create a new template.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns TemplateResponse Successful Response
   * @throws ApiError
   */
  public static createTemplate(
    data: TemplatesCreateTemplateData,
  ): CancelablePromise<TemplatesCreateTemplateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/templates",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Invoice Templates
   * Get all invoice templates.
   * @param data The data for the request.
   * @param data.isActive Filter by active status
   * @param data.isSystem Show only system templates
   * @returns TemplateResponse Successful Response
   * @throws ApiError
   */
  public static getInvoiceTemplates(
    data: TemplatesGetInvoiceTemplatesData = {},
  ): CancelablePromise<TemplatesGetInvoiceTemplatesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/templates/invoices",
      query: {
        is_active: data.isActive,
        is_system: data.isSystem,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Estimate Templates
   * Get all estimate templates.
   * @param data The data for the request.
   * @param data.isActive Filter by active status
   * @param data.isSystem Show only system templates
   * @returns TemplateResponse Successful Response
   * @throws ApiError
   */
  public static getEstimateTemplates(
    data: TemplatesGetEstimateTemplatesData = {},
  ): CancelablePromise<TemplatesGetEstimateTemplatesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/templates/estimates",
      query: {
        is_active: data.isActive,
        is_system: data.isSystem,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Contract Templates
   * Get all contract templates.
   * @param data The data for the request.
   * @param data.isActive Filter by active status
   * @param data.isSystem Show only system templates
   * @returns TemplateResponse Successful Response
   * @throws ApiError
   */
  public static getContractTemplates(
    data: TemplatesGetContractTemplatesData = {},
  ): CancelablePromise<TemplatesGetContractTemplatesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/templates/contracts",
      query: {
        is_active: data.isActive,
        is_system: data.isSystem,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Templates By Type
   * Get all templates for a specific type (e.g., /templates/type/invoice).
   *
   * This is a convenience endpoint for mobile apps.
   * @param data The data for the request.
   * @param data.templateType
   * @param data.isActive Filter by active status
   * @param data.isSystem Show only system templates
   * @returns TemplateResponse Successful Response
   * @throws ApiError
   */
  public static getTemplatesByType(
    data: TemplatesGetTemplatesByTypeData,
  ): CancelablePromise<TemplatesGetTemplatesByTypeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/templates/type/{template_type}",
      path: {
        template_type: data.templateType,
      },
      query: {
        is_active: data.isActive,
        is_system: data.isSystem,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Default Template
   * Get the default template for a specific type.
   *
   * Returns the business default or falls back to system default.
   * @param data The data for the request.
   * @param data.templateType
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getDefaultTemplate(
    data: TemplatesGetDefaultTemplateData,
  ): CancelablePromise<TemplatesGetDefaultTemplateResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/templates/default/{template_type}",
      path: {
        template_type: data.templateType,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Validate Template Access
   * Validate if templates exist and are accessible for the current business.
   *
   * Helps prevent template validation errors by checking accessibility upfront.
   * Returns validation status for each template ID.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static validateTemplateAccess(
    data: TemplatesValidateTemplateAccessData,
  ): CancelablePromise<TemplatesValidateTemplateAccessResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/templates/validate",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Template
   * Get a specific template by ID.
   * @param data The data for the request.
   * @param data.templateId
   * @returns TemplateResponse Successful Response
   * @throws ApiError
   */
  public static getTemplate(
    data: TemplatesGetTemplateData,
  ): CancelablePromise<TemplatesGetTemplateResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/templates/{template_id}",
      path: {
        template_id: data.templateId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Template
   * Update an existing template.
   * @param data The data for the request.
   * @param data.templateId
   * @param data.requestBody
   * @returns TemplateResponse Successful Response
   * @throws ApiError
   */
  public static updateTemplate(
    data: TemplatesUpdateTemplateData,
  ): CancelablePromise<TemplatesUpdateTemplateResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/templates/{template_id}",
      path: {
        template_id: data.templateId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Template
   * Delete a template.
   * @param data The data for the request.
   * @param data.templateId
   * @returns void Successful Response
   * @throws ApiError
   */
  public static deleteTemplate(
    data: TemplatesDeleteTemplateData,
  ): CancelablePromise<TemplatesDeleteTemplateResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/templates/{template_id}",
      path: {
        template_id: data.templateId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Set Default Template
   * Set a template as the default for its type.
   * @param data The data for the request.
   * @param data.templateId
   * @returns TemplateResponse Successful Response
   * @throws ApiError
   */
  public static setDefaultTemplate(
    data: TemplatesSetDefaultTemplateData,
  ): CancelablePromise<TemplatesSetDefaultTemplateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/templates/{template_id}/set-default",
      path: {
        template_id: data.templateId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Clone Template
   * Clone an existing template.
   * @param data The data for the request.
   * @param data.templateId
   * @param data.requestBody
   * @returns TemplateResponse Successful Response
   * @throws ApiError
   */
  public static cloneTemplate(
    data: TemplatesCloneTemplateData,
  ): CancelablePromise<TemplatesCloneTemplateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/templates/{template_id}/clone",
      path: {
        template_id: data.templateId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Get Current User Profile
   * Get current user profile with simplified onboarding status.
   *
   * Onboarding completion is determined solely by business membership:
   * - User has active business membership = onboarding complete
   * - User has no active business membership = needs onboarding
   *
   * This handles both cases:
   * 1. User creates business during onboarding (becomes owner)
   * 2. User joins existing business (becomes member)
   * @returns UserProfileResponse Successful Response
   * @throws ApiError
   */
  public static getCurrentUserProfile(): CancelablePromise<UsersGetCurrentUserProfileResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Business Context
   * Update the user's current business context.
   *
   * This endpoint allows switching the user's active business context.
   * It redirects to the business context switch endpoint.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updateUserBusinessContext(
    data: UsersUpdateUserBusinessContextData,
  ): CancelablePromise<UsersUpdateUserBusinessContextResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/users/me/business-context",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}
